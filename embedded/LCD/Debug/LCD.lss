
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00002bf4  00002c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080017e  0080017e  00002d06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00002da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f58  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb8  00000000  00000000  00005ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a99  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  0000851c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000762  00000000  00000000  00008930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000151d  00000000  00000000  00009092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000a5af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__ctors_end>
       4:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__vector_1>
       8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      10:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_4>
      14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      1c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      20:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      28:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      2c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      30:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      34:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      38:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      44:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      48:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_18>
      4c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      58:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      5c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      60:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      64:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__vector_4+0x172>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__trampolines_end>:
      c2:	6e 61       	ori	r22, 0x1E	; 30
      c4:	6e 00       	.word	0x006e	; ????

000000c6 <__c.2332>:
      c6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      d6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      e6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      f6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     106:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     116:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     126:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     136:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     146:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     156:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     166:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     176:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     186:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     196:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1a6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1b6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001c4 <__ctors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	d8 e0       	ldi	r29, 0x08	; 8
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	11 e0       	ldi	r17, 0x01	; 1
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	e4 ef       	ldi	r30, 0xF4	; 244
     1d8:	fb e2       	ldi	r31, 0x2B	; 43
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	ae 37       	cpi	r26, 0x7E	; 126
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	ae e7       	ldi	r26, 0x7E	; 126
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	a1 3a       	cpi	r26, 0xA1	; 161
     1f2:	b2 07       	cpc	r27, r18
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
     1f6:	0e 94 18 06 	call	0xc30	; 0xc30 <main>
     1fa:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <_exit>

000001fe <__bad_interrupt>:
     1fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000202 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     202:	2a 9a       	sbi	0x05, 2	; 5
     204:	00 c0       	rjmp	.+0      	; 0x206 <toggle_e+0x4>
     206:	2a 98       	cbi	0x05, 2	; 5
     208:	08 95       	ret

0000020a <lcd_write>:
     20a:	cf 93       	push	r28
     20c:	c8 2f       	mov	r28, r24
     20e:	66 23       	and	r22, r22
     210:	11 f0       	breq	.+4      	; 0x216 <lcd_write+0xc>
     212:	28 9a       	sbi	0x05, 0	; 5
     214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_write+0xe>
     216:	28 98       	cbi	0x05, 0	; 5
     218:	29 98       	cbi	0x05, 1	; 5
     21a:	24 9a       	sbi	0x04, 4	; 4
     21c:	25 9a       	sbi	0x04, 5	; 4
     21e:	26 9a       	sbi	0x04, 6	; 4
     220:	27 9a       	sbi	0x04, 7	; 4
     222:	2f 98       	cbi	0x05, 7	; 5
     224:	2e 98       	cbi	0x05, 6	; 5
     226:	2d 98       	cbi	0x05, 5	; 5
     228:	2c 98       	cbi	0x05, 4	; 5
     22a:	cc 23       	and	r28, r28
     22c:	0c f4       	brge	.+2      	; 0x230 <lcd_write+0x26>
     22e:	2f 9a       	sbi	0x05, 7	; 5
     230:	c6 fd       	sbrc	r28, 6
     232:	2e 9a       	sbi	0x05, 6	; 5
     234:	c5 fd       	sbrc	r28, 5
     236:	2d 9a       	sbi	0x05, 5	; 5
     238:	c4 fd       	sbrc	r28, 4
     23a:	2c 9a       	sbi	0x05, 4	; 5
     23c:	0e 94 01 01 	call	0x202	; 0x202 <toggle_e>
     240:	2f 98       	cbi	0x05, 7	; 5
     242:	2e 98       	cbi	0x05, 6	; 5
     244:	2d 98       	cbi	0x05, 5	; 5
     246:	2c 98       	cbi	0x05, 4	; 5
     248:	c3 fd       	sbrc	r28, 3
     24a:	2f 9a       	sbi	0x05, 7	; 5
     24c:	c2 fd       	sbrc	r28, 2
     24e:	2e 9a       	sbi	0x05, 6	; 5
     250:	c1 fd       	sbrc	r28, 1
     252:	2d 9a       	sbi	0x05, 5	; 5
     254:	c0 fd       	sbrc	r28, 0
     256:	2c 9a       	sbi	0x05, 4	; 5
     258:	0e 94 01 01 	call	0x202	; 0x202 <toggle_e>
     25c:	2c 9a       	sbi	0x05, 4	; 5
     25e:	2d 9a       	sbi	0x05, 5	; 5
     260:	2e 9a       	sbi	0x05, 6	; 5
     262:	2f 9a       	sbi	0x05, 7	; 5
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <lcd_read>:
     268:	88 23       	and	r24, r24
     26a:	11 f0       	breq	.+4      	; 0x270 <lcd_read+0x8>
     26c:	28 9a       	sbi	0x05, 0	; 5
     26e:	01 c0       	rjmp	.+2      	; 0x272 <lcd_read+0xa>
     270:	28 98       	cbi	0x05, 0	; 5
     272:	29 9a       	sbi	0x05, 1	; 5
     274:	24 98       	cbi	0x04, 4	; 4
     276:	25 98       	cbi	0x04, 5	; 4
     278:	26 98       	cbi	0x04, 6	; 4
     27a:	27 98       	cbi	0x04, 7	; 4
     27c:	2a 9a       	sbi	0x05, 2	; 5
     27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_read+0x18>
     280:	1c 9b       	sbis	0x03, 4	; 3
     282:	02 c0       	rjmp	.+4      	; 0x288 <lcd_read+0x20>
     284:	80 e1       	ldi	r24, 0x10	; 16
     286:	01 c0       	rjmp	.+2      	; 0x28a <lcd_read+0x22>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	1d 99       	sbic	0x03, 5	; 3
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	1e 99       	sbic	0x03, 6	; 3
     290:	80 64       	ori	r24, 0x40	; 64
     292:	1f 99       	sbic	0x03, 7	; 3
     294:	80 68       	ori	r24, 0x80	; 128
     296:	2a 98       	cbi	0x05, 2	; 5
     298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_read+0x32>
     29a:	2a 9a       	sbi	0x05, 2	; 5
     29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_read+0x36>
     29e:	1c 99       	sbic	0x03, 4	; 3
     2a0:	81 60       	ori	r24, 0x01	; 1
     2a2:	1d 99       	sbic	0x03, 5	; 3
     2a4:	82 60       	ori	r24, 0x02	; 2
     2a6:	1e 99       	sbic	0x03, 6	; 3
     2a8:	84 60       	ori	r24, 0x04	; 4
     2aa:	1f 99       	sbic	0x03, 7	; 3
     2ac:	88 60       	ori	r24, 0x08	; 8
     2ae:	2a 98       	cbi	0x05, 2	; 5
     2b0:	08 95       	ret

000002b2 <lcd_waitbusy>:
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 34 01 	call	0x268	; 0x268 <lcd_read>
     2b8:	88 23       	and	r24, r24
     2ba:	dc f3       	brlt	.-10     	; 0x2b2 <lcd_waitbusy>
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_waitbusy+0xe>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 34 01 	call	0x268	; 0x268 <lcd_read>
     2ca:	08 95       	ret

000002cc <lcd_command>:
     2cc:	cf 93       	push	r28
     2ce:	c8 2f       	mov	r28, r24
     2d0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_waitbusy>
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	8c 2f       	mov	r24, r28
     2d8:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_write>
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <lcd_data>:
     2e0:	cf 93       	push	r28
     2e2:	c8 2f       	mov	r28, r24
     2e4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_waitbusy>
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_write>
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <lcd_gotoxy>:
     2f4:	61 11       	cpse	r22, r1
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <lcd_gotoxy+0xc>
     2f8:	80 58       	subi	r24, 0x80	; 128
     2fa:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
     2fe:	08 95       	ret
     300:	61 30       	cpi	r22, 0x01	; 1
     302:	21 f4       	brne	.+8      	; 0x30c <lcd_gotoxy+0x18>
     304:	80 54       	subi	r24, 0x40	; 64
     306:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
     30a:	08 95       	ret
     30c:	62 30       	cpi	r22, 0x02	; 2
     30e:	21 f4       	brne	.+8      	; 0x318 <lcd_gotoxy+0x24>
     310:	8c 56       	subi	r24, 0x6C	; 108
     312:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
     316:	08 95       	ret
     318:	8c 52       	subi	r24, 0x2C	; 44
     31a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
     31e:	08 95       	ret

00000320 <lcd_clrscr>:
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
     326:	08 95       	ret

00000328 <lcd_putc>:
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
     32c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_waitbusy>
     330:	ca 30       	cpi	r28, 0x0A	; 10
     332:	a1 f4       	brne	.+40     	; 0x35c <lcd_putc+0x34>
     334:	84 31       	cpi	r24, 0x14	; 20
     336:	48 f0       	brcs	.+18     	; 0x34a <lcd_putc+0x22>
     338:	90 ec       	ldi	r25, 0xC0	; 192
     33a:	98 0f       	add	r25, r24
     33c:	94 31       	cpi	r25, 0x14	; 20
     33e:	38 f0       	brcs	.+14     	; 0x34e <lcd_putc+0x26>
     340:	84 51       	subi	r24, 0x14	; 20
     342:	8c 32       	cpi	r24, 0x2C	; 44
     344:	30 f0       	brcs	.+12     	; 0x352 <lcd_putc+0x2a>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	05 c0       	rjmp	.+10     	; 0x354 <lcd_putc+0x2c>
     34a:	80 e4       	ldi	r24, 0x40	; 64
     34c:	03 c0       	rjmp	.+6      	; 0x354 <lcd_putc+0x2c>
     34e:	84 e1       	ldi	r24, 0x14	; 20
     350:	01 c0       	rjmp	.+2      	; 0x354 <lcd_putc+0x2c>
     352:	84 e5       	ldi	r24, 0x54	; 84
     354:	80 58       	subi	r24, 0x80	; 128
     356:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
     35a:	04 c0       	rjmp	.+8      	; 0x364 <lcd_putc+0x3c>
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	8c 2f       	mov	r24, r28
     360:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_write>
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <lcd_puts>:
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	21 96       	adiw	r28, 0x01	; 1
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	88 23       	and	r24, r24
     376:	29 f0       	breq	.+10     	; 0x382 <lcd_puts+0x1a>
     378:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
     37c:	89 91       	ld	r24, Y+
     37e:	81 11       	cpse	r24, r1
     380:	fb cf       	rjmp	.-10     	; 0x378 <lcd_puts+0x10>
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     390:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     392:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     394:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     396:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     398:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     39a:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     39c:	27 9a       	sbi	0x04, 7	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	9a ef       	ldi	r25, 0xFA	; 250
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     3a6:	2d 9a       	sbi	0x05, 5	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     3a8:	2c 9a       	sbi	0x05, 4	; 5
    lcd_e_toggle();
     3aa:	0e 94 01 01 	call	0x202	; 0x202 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	9e e4       	ldi	r25, 0x4E	; 78
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     3b6:	0e 94 01 01 	call	0x202	; 0x202 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3ba:	c0 e0       	ldi	r28, 0x00	; 0
     3bc:	d1 e0       	ldi	r29, 0x01	; 1
     3be:	ce 01       	movw	r24, r28
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     3c4:	0e 94 01 01 	call	0x202	; 0x202 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     3ce:	2c 98       	cbi	0x05, 4	; 5
    lcd_e_toggle();
     3d0:	0e 94 01 01 	call	0x202	; 0x202 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3d4:	21 97       	sbiw	r28, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     3de:	88 e0       	ldi	r24, 0x08	; 8
     3e0:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     3e4:	0e 94 90 01 	call	0x320	; 0x320 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     3e8:	86 e0       	ldi	r24, 0x06	; 6
     3ea:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     3ee:	81 2f       	mov	r24, r17
     3f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>

}/* lcd_init */
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	08 95       	ret

000003fc <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     3fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     400:	8c e0       	ldi	r24, 0x0C	; 12
     402:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     406:	08 95       	ret

00000408 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     408:	94 ea       	ldi	r25, 0xA4	; 164
     40a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     40e:	ec eb       	ldi	r30, 0xBC	; 188
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	90 81       	ld	r25, Z
     414:	99 23       	and	r25, r25
     416:	ec f7       	brge	.-6      	; 0x412 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     418:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     41c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     41e:	98 30       	cpi	r25, 0x08	; 8
     420:	11 f0       	breq	.+4      	; 0x426 <i2c_start+0x1e>
     422:	90 31       	cpi	r25, 0x10	; 16
     424:	a1 f4       	brne	.+40     	; 0x44e <i2c_start+0x46>

	// send device address
	TWDR = address;
     426:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     42a:	84 e8       	ldi	r24, 0x84	; 132
     42c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     430:	ec eb       	ldi	r30, 0xBC	; 188
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	88 23       	and	r24, r24
     438:	ec f7       	brge	.-6      	; 0x434 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     43a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     43e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     440:	98 31       	cpi	r25, 0x18	; 24
     442:	39 f0       	breq	.+14     	; 0x452 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 34       	cpi	r25, 0x40	; 64
     448:	29 f4       	brne	.+10     	; 0x454 <i2c_start+0x4c>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     452:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     454:	08 95       	ret

00000456 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     45a:	ec eb       	ldi	r30, 0xBC	; 188
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     460:	a9 eb       	ldi	r26, 0xB9	; 185
     462:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     464:	cb eb       	ldi	r28, 0xBB	; 187
     466:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     468:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     46a:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     46c:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     46e:	90 81       	ld	r25, Z
     470:	99 23       	and	r25, r25
     472:	ec f7       	brge	.-6      	; 0x46e <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     474:	9c 91       	ld	r25, X
     476:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     478:	98 30       	cpi	r25, 0x08	; 8
     47a:	11 f0       	breq	.+4      	; 0x480 <i2c_start_wait+0x2a>
     47c:	90 31       	cpi	r25, 0x10	; 16
     47e:	b1 f7       	brne	.-20     	; 0x46c <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     480:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     482:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     484:	90 81       	ld	r25, Z
     486:	99 23       	and	r25, r25
     488:	ec f7       	brge	.-6      	; 0x484 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     48a:	9c 91       	ld	r25, X
     48c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     48e:	90 32       	cpi	r25, 0x20	; 32
     490:	11 f0       	breq	.+4      	; 0x496 <i2c_start_wait+0x40>
     492:	98 35       	cpi	r25, 0x58	; 88
     494:	29 f4       	brne	.+10     	; 0x4a0 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     496:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     498:	90 81       	ld	r25, Z
     49a:	94 fd       	sbrc	r25, 4
     49c:	fd cf       	rjmp	.-6      	; 0x498 <i2c_start_wait+0x42>
     49e:	e6 cf       	rjmp	.-52     	; 0x46c <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     4a6:	0e 94 04 02 	call	0x408	; 0x408 <i2c_start>

}/* i2c_rep_start */
     4aa:	08 95       	ret

000004ac <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     4ac:	84 e9       	ldi	r24, 0x94	; 148
     4ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     4b2:	ec eb       	ldi	r30, 0xBC	; 188
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	84 fd       	sbrc	r24, 4
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <i2c_stop+0xa>

}/* i2c_stop */
     4bc:	08 95       	ret

000004be <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     4be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     4c2:	84 e8       	ldi	r24, 0x84	; 132
     4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     4c8:	ec eb       	ldi	r30, 0xBC	; 188
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	88 23       	and	r24, r24
     4d0:	ec f7       	brge	.-6      	; 0x4cc <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     4d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     4d6:	98 7f       	andi	r25, 0xF8	; 248
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	98 32       	cpi	r25, 0x28	; 40
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <i2c_write+0x22>
     4de:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     4e0:	08 95       	ret

000004e2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     4e2:	84 ec       	ldi	r24, 0xC4	; 196
     4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));    
     4e8:	ec eb       	ldi	r30, 0xBC	; 188
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	88 23       	and	r24, r24
     4f0:	ec f7       	brge	.-6      	; 0x4ec <i2c_readAck+0xa>

    return TWDR;
     4f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readAck */
     4f6:	08 95       	ret

000004f8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     4f8:	84 e8       	ldi	r24, 0x84	; 132
     4fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
     4fe:	ec eb       	ldi	r30, 0xBC	; 188
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 23       	and	r24, r24
     506:	ec f7       	brge	.-6      	; 0x502 <i2c_readNak+0xa>
	
    return TWDR;
     508:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
     50c:	08 95       	ret

0000050e <customChar>:
double resVoltage;

/*Custom chars*/
void customChar()
{
    lcd_command(0x40);
     50e:	80 e4       	ldi	r24, 0x40	; 64
     510:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_data(0x1F);
     514:	8f e1       	ldi	r24, 0x1F	; 31
     516:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     51a:	81 e1       	ldi	r24, 0x11	; 17
     51c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     520:	81 e1       	ldi	r24, 0x11	; 17
     522:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     526:	81 e1       	ldi	r24, 0x11	; 17
     528:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     52c:	81 e1       	ldi	r24, 0x11	; 17
     52e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     532:	81 e1       	ldi	r24, 0x11	; 17
     534:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     538:	81 e1       	ldi	r24, 0x11	; 17
     53a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     53e:	8f e1       	ldi	r24, 0x1F	; 31
     540:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>

    lcd_command(0x48);
     544:	88 e4       	ldi	r24, 0x48	; 72
     546:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_data(0x1F);
     54a:	8f e1       	ldi	r24, 0x1F	; 31
     54c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     550:	81 e1       	ldi	r24, 0x11	; 17
     552:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     556:	81 e1       	ldi	r24, 0x11	; 17
     558:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     55c:	81 e1       	ldi	r24, 0x11	; 17
     55e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     562:	81 e1       	ldi	r24, 0x11	; 17
     564:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     568:	8b e1       	ldi	r24, 0x1B	; 27
     56a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     56e:	8f e1       	ldi	r24, 0x1F	; 31
     570:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     574:	8f e1       	ldi	r24, 0x1F	; 31
     576:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>

    lcd_command(0x50);
     57a:	80 e5       	ldi	r24, 0x50	; 80
     57c:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_data(0x1F);
     580:	8f e1       	ldi	r24, 0x1F	; 31
     582:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     586:	81 e1       	ldi	r24, 0x11	; 17
     588:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     58c:	81 e1       	ldi	r24, 0x11	; 17
     58e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     592:	81 e1       	ldi	r24, 0x11	; 17
     594:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     598:	8b e1       	ldi	r24, 0x1B	; 27
     59a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     59e:	8f e1       	ldi	r24, 0x1F	; 31
     5a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     5a4:	8f e1       	ldi	r24, 0x1F	; 31
     5a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     5aa:	8f e1       	ldi	r24, 0x1F	; 31
     5ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>

    lcd_command(0x58);
     5b0:	88 e5       	ldi	r24, 0x58	; 88
     5b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_data(0x1F);
     5b6:	8f e1       	ldi	r24, 0x1F	; 31
     5b8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     5bc:	81 e1       	ldi	r24, 0x11	; 17
     5be:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     5c2:	8b e1       	ldi	r24, 0x1B	; 27
     5c4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     5c8:	8f e1       	ldi	r24, 0x1F	; 31
     5ca:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     5ce:	8b e1       	ldi	r24, 0x1B	; 27
     5d0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     5d4:	8f e1       	ldi	r24, 0x1F	; 31
     5d6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     5da:	8f e1       	ldi	r24, 0x1F	; 31
     5dc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     5e0:	8f e1       	ldi	r24, 0x1F	; 31
     5e2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>

    lcd_command(0x60);
     5e6:	80 e6       	ldi	r24, 0x60	; 96
     5e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_data(0x00);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x0E);
     5f2:	8e e0       	ldi	r24, 0x0E	; 14
     5f4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x11);
     5f8:	81 e1       	ldi	r24, 0x11	; 17
     5fa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x00);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1F);
     604:	8f e1       	ldi	r24, 0x1F	; 31
     606:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x0E);
     60a:	8e e0       	ldi	r24, 0x0E	; 14
     60c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x04);
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x04);
     616:	84 e0       	ldi	r24, 0x04	; 4
     618:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>

    lcd_command(0x68);
     61c:	88 e6       	ldi	r24, 0x68	; 104
     61e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_command>
    lcd_data(0x1B);
     622:	8b e1       	ldi	r24, 0x1B	; 27
     624:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     628:	8b e1       	ldi	r24, 0x1B	; 27
     62a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     62e:	8b e1       	ldi	r24, 0x1B	; 27
     630:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     634:	8b e1       	ldi	r24, 0x1B	; 27
     636:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     63a:	8b e1       	ldi	r24, 0x1B	; 27
     63c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     640:	8b e1       	ldi	r24, 0x1B	; 27
     642:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     646:	8b e1       	ldi	r24, 0x1B	; 27
     648:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
    lcd_data(0x1B);
     64c:	8b e1       	ldi	r24, 0x1B	; 27
     64e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_data>
     652:	08 95       	ret

00000654 <change_brightness>:
}

/* BRIGHTNESS STUFF*/
void change_brightness(int level)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
    customChar();
     65a:	0e 94 87 02 	call	0x50e	; 0x50e <customChar>
    lcd_gotoxy(15, 0);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	8f e0       	ldi	r24, 0x0F	; 15
     662:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
    if (level == 0) {
     666:	20 97       	sbiw	r28, 0x00	; 0
     668:	21 f4       	brne	.+8      	; 0x672 <change_brightness+0x1e>
        lcd_putc(0);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
     670:	1a c0       	rjmp	.+52     	; 0x6a6 <change_brightness+0x52>
    } else if (level == 1) {
     672:	c1 30       	cpi	r28, 0x01	; 1
     674:	d1 05       	cpc	r29, r1
     676:	21 f4       	brne	.+8      	; 0x680 <change_brightness+0x2c>
        lcd_putc(1);
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
     67e:	13 c0       	rjmp	.+38     	; 0x6a6 <change_brightness+0x52>
    } else if (level == 2) {
     680:	c2 30       	cpi	r28, 0x02	; 2
     682:	d1 05       	cpc	r29, r1
     684:	21 f4       	brne	.+8      	; 0x68e <change_brightness+0x3a>
        lcd_putc(2);
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
     68c:	0c c0       	rjmp	.+24     	; 0x6a6 <change_brightness+0x52>
    } else if (level == 3) {
     68e:	c3 30       	cpi	r28, 0x03	; 3
     690:	d1 05       	cpc	r29, r1
     692:	21 f4       	brne	.+8      	; 0x69c <change_brightness+0x48>
        lcd_putc(3);
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <change_brightness+0x52>
    } else if (level == 4) {
     69c:	24 97       	sbiw	r28, 0x04	; 4
     69e:	19 f4       	brne	.+6      	; 0x6a6 <change_brightness+0x52>
        lcd_putc(255);
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    }
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <change_mode>:

void change_mode(int mode)
{
    if (mode == 1) {
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	91 05       	cpc	r25, r1
     6b0:	89 f4       	brne	.+34     	; 0x6d4 <change_mode+0x28>
        lcd_clrscr();
     6b2:	0e 94 90 01 	call	0x320	; 0x320 <lcd_clrscr>
        lcd_gotoxy(0, 0);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
        lcd_puts("Mode: V(DC)");
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        calc = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     6ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6d2:	08 95       	ret
    } else if (mode == 2) {
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	91 05       	cpc	r25, r1
     6d8:	89 f4       	brne	.+34     	; 0x6fc <change_mode+0x50>
        lcd_clrscr();
     6da:	0e 94 90 01 	call	0x320	; 0x320 <lcd_clrscr>
        lcd_gotoxy(0, 0);
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
        lcd_puts("MODE:V(AC)");
     6e6:	82 e1       	ldi	r24, 0x12	; 18
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        calc = 2;
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     6f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6fa:	08 95       	ret
    } else if (mode == 3) {
     6fc:	83 30       	cpi	r24, 0x03	; 3
     6fe:	91 05       	cpc	r25, r1
     700:	89 f4       	brne	.+34     	; 0x724 <change_mode+0x78>
        lcd_clrscr();
     702:	0e 94 90 01 	call	0x320	; 0x320 <lcd_clrscr>
        lcd_gotoxy(0, 0);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
        lcd_puts("MODE:Resistance");
     70e:	8d e1       	ldi	r24, 0x1D	; 29
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        calc = 3;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     71e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     722:	08 95       	ret
    } else if (mode == 4) {
     724:	04 97       	sbiw	r24, 0x04	; 4
     726:	81 f4       	brne	.+32     	; 0x748 <change_mode+0x9c>
        lcd_clrscr();
     728:	0e 94 90 01 	call	0x320	; 0x320 <lcd_clrscr>
        lcd_gotoxy(0, 0);
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
        lcd_puts("MODE:Continuity");
     734:	8d e2       	ldi	r24, 0x2D	; 45
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
        calc = 4;
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     744:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     748:	08 95       	ret

0000074a <__vector_4>:
    }
}

/*INTERRUPT HANDLER*/
ISR(PCINT1_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
    /*check what button was pressed*/
    /* if the pin is low decrease the brightness */
    if ((PINC & (1 << PINC0)) == 0 && hold == 0) {
     76c:	30 99       	sbic	0x06, 0	; 6
     76e:	30 c0       	rjmp	.+96     	; 0x7d0 <__vector_4+0x86>
     770:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     774:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
     778:	89 2b       	or	r24, r25
     77a:	09 f0       	breq	.+2      	; 0x77e <__vector_4+0x34>
     77c:	a5 c0       	rjmp	.+330    	; 0x8c8 <__vector_4+0x17e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77e:	83 e2       	ldi	r24, 0x23	; 35
     780:	94 ef       	ldi	r25, 0xF4	; 244
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <__vector_4+0x38>
     786:	00 c0       	rjmp	.+0      	; 0x788 <__vector_4+0x3e>
     788:	00 00       	nop
        _delay_ms(250);
        if (current_level - 1 <= 0 && OCR0A + 63 > 251) {
     78a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_level>
     78e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_level+0x1>
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	18 16       	cp	r1, r24
     796:	19 06       	cpc	r1, r25
     798:	74 f0       	brlt	.+28     	; 0x7b6 <__vector_4+0x6c>
     79a:	27 b5       	in	r18, 0x27	; 39
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	21 5c       	subi	r18, 0xC1	; 193
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	2c 3f       	cpi	r18, 0xFC	; 252
     7a4:	31 05       	cpc	r19, r1
     7a6:	3c f0       	brlt	.+14     	; 0x7b6 <__vector_4+0x6c>
            current_level = 0;
     7a8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <current_level+0x1>
     7ac:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_level>
            OCR0A = 255;
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	87 bd       	out	0x27, r24	; 39
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <__vector_4+0x7a>
        } else {
            current_level--;
     7b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     7ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
            OCR0A = OCR0A + 63;
     7be:	87 b5       	in	r24, 0x27	; 39
     7c0:	81 5c       	subi	r24, 0xC1	; 193
     7c2:	87 bd       	out	0x27, r24	; 39
        }
        change_brightness(current_level);
     7c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_level>
     7c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_level+0x1>
     7cc:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
    }

    /* if the pin is high increase the brightness */
    if ((PINC & (1 << PINC1)) == 0 && hold == 0) {
     7d0:	31 99       	sbic	0x06, 1	; 6
     7d2:	31 c0       	rjmp	.+98     	; 0x836 <__vector_4+0xec>
     7d4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     7d8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
     7dc:	89 2b       	or	r24, r25
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_4+0x98>
     7e0:	71 c0       	rjmp	.+226    	; 0x8c4 <__vector_4+0x17a>
     7e2:	83 e2       	ldi	r24, 0x23	; 35
     7e4:	94 ef       	ldi	r25, 0xF4	; 244
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <__vector_4+0x9c>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <__vector_4+0xa2>
     7ec:	00 00       	nop
        _delay_ms(250);
        if (current_level + 1 >= 4 && OCR0A - 63 <= 3) {
     7ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_level>
     7f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_level+0x1>
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	84 30       	cpi	r24, 0x04	; 4
     7fa:	91 05       	cpc	r25, r1
     7fc:	7c f0       	brlt	.+30     	; 0x81c <__vector_4+0xd2>
     7fe:	27 b5       	in	r18, 0x27	; 39
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	2f 53       	subi	r18, 0x3F	; 63
     804:	31 09       	sbc	r19, r1
     806:	24 30       	cpi	r18, 0x04	; 4
     808:	31 05       	cpc	r19, r1
     80a:	44 f4       	brge	.+16     	; 0x81c <__vector_4+0xd2>
            current_level = 4;
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     814:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
            OCR0A = 0;
     818:	17 bc       	out	0x27, r1	; 39
     81a:	07 c0       	rjmp	.+14     	; 0x82a <__vector_4+0xe0>
        } else {
            current_level++;
     81c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     820:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
            OCR0A = OCR0A - 63;
     824:	87 b5       	in	r24, 0x27	; 39
     826:	8f 53       	subi	r24, 0x3F	; 63
     828:	87 bd       	out	0x27, r24	; 39
        }
        change_brightness(current_level);
     82a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_level>
     82e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_level+0x1>
     832:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
    }

    /* if pin changes change mode*/
    if ((PINC & (1 << PINC2)) == 0 && hold == 0) {
     836:	32 99       	sbic	0x06, 2	; 6
     838:	2b c0       	rjmp	.+86     	; 0x890 <__vector_4+0x146>
     83a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     83e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
     842:	89 2b       	or	r24, r25
     844:	29 f5       	brne	.+74     	; 0x890 <__vector_4+0x146>
     846:	83 e2       	ldi	r24, 0x23	; 35
     848:	94 ef       	ldi	r25, 0xF4	; 244
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <__vector_4+0x100>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <__vector_4+0x106>
     850:	00 00       	nop
        _delay_ms(250);
        if (current_mode + 1 <= 4) {
     852:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current_mode>
     856:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current_mode+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	85 30       	cpi	r24, 0x05	; 5
     85e:	91 05       	cpc	r25, r1
     860:	2c f4       	brge	.+10     	; 0x86c <__vector_4+0x122>
            current_mode++;
     862:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <current_mode+0x1>
     866:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_mode>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <__vector_4+0x12e>
        } else {
            current_mode = 1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <current_mode+0x1>
     874:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_mode>
        }
        change_mode(current_mode);
     878:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current_mode>
     87c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current_mode+0x1>
     880:	0e 94 56 03 	call	0x6ac	; 0x6ac <change_mode>
        change_brightness(current_level);
     884:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_level>
     888:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_level+0x1>
     88c:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
    }

    if ((PINC & (1 << PINC3)) == 0) {
     890:	33 99       	sbic	0x06, 3	; 6
     892:	1d c0       	rjmp	.+58     	; 0x8ce <__vector_4+0x184>
     894:	83 e2       	ldi	r24, 0x23	; 35
     896:	94 ef       	ldi	r25, 0xF4	; 244
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <__vector_4+0x14e>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <__vector_4+0x154>
     89e:	00 00       	nop
        _delay_ms(250);
        if (hold == 0) {
     8a0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     8a4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
     8a8:	89 2b       	or	r24, r25
     8aa:	39 f4       	brne	.+14     	; 0x8ba <__vector_4+0x170>
            hold = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
     8b4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
     8b8:	0a c0       	rjmp	.+20     	; 0x8ce <__vector_4+0x184>
        } else {
            hold = 0;
     8ba:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
     8be:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
        }
    }
}
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <__vector_4+0x184>
        }
        change_brightness(current_level);
    }

    /* if pin changes change mode*/
    if ((PINC & (1 << PINC2)) == 0 && hold == 0) {
     8c4:	86 b1       	in	r24, 0x06	; 6
     8c6:	e4 cf       	rjmp	.-56     	; 0x890 <__vector_4+0x146>
        }
        change_brightness(current_level);
    }

    /* if the pin is high increase the brightness */
    if ((PINC & (1 << PINC1)) == 0 && hold == 0) {
     8c8:	31 9b       	sbis	0x06, 1	; 6
     8ca:	fc cf       	rjmp	.-8      	; 0x8c4 <__vector_4+0x17a>
     8cc:	b4 cf       	rjmp	.-152    	; 0x836 <__vector_4+0xec>
            hold = 1;
        } else {
            hold = 0;
        }
    }
}
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	7f 91       	pop	r23
     8dc:	6f 91       	pop	r22
     8de:	5f 91       	pop	r21
     8e0:	4f 91       	pop	r20
     8e2:	3f 91       	pop	r19
     8e4:	2f 91       	pop	r18
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	0f 90       	pop	r0
     8ec:	1f 90       	pop	r1
     8ee:	18 95       	reti

000008f0 <uart_init>:
/*******************************************************************/
/*                      UART FUNCTIONS                             */
void uart_init(uint8_t ubrr)
{
    /*initialise uart on ATMega328P*/
    UBRR0H = (unsigned char)(ubrr >> 8);
     8f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (unsigned char)ubrr;
     8f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    // UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    // UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    UCSR0B = (1 << TXEN0);
     8f8:	e1 ec       	ldi	r30, 0xC1	; 193
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	88 e0       	ldi	r24, 0x08	; 8
     8fe:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << RXEN0);
     900:	80 81       	ld	r24, Z
     902:	80 69       	ori	r24, 0x90	; 144
     904:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0);
     906:	e0 ec       	ldi	r30, 0xC0	; 192
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24

    UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     910:	8e e0       	ldi	r24, 0x0E	; 14
     912:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     916:	08 95       	ret

00000918 <uart_transmit>:
}
void uart_transmit(unsigned char data)
{
    /* Wait for empty transmit buffer */
    while (!(UCSR0A & (1 << UDRE0)))
     918:	e0 ec       	ldi	r30, 0xC0	; 192
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	90 81       	ld	r25, Z
     91e:	95 ff       	sbrs	r25, 5
     920:	fd cf       	rjmp	.-6      	; 0x91c <uart_transmit+0x4>
        ;
    /* Put data into buffer, sends the data */
    UDR0 = data;
     922:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     926:	08 95       	ret

00000928 <uart_newline>:
    }
}

void uart_newline(void)
{
    uart_transmit('\n');
     928:	8a e0       	ldi	r24, 0x0A	; 10
     92a:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    uart_transmit('\r');
     92e:	8d e0       	ldi	r24, 0x0D	; 13
     930:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
     934:	08 95       	ret

00000936 <uart_receive>:
    UDR0 = data;
}
unsigned char uart_receive(void)
{
    /* Wait for data to be received */
    while (!(UCSR0A & (1 << RXC0)))
     936:	e0 ec       	ldi	r30, 0xC0	; 192
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	88 23       	and	r24, r24
     93e:	ec f7       	brge	.-6      	; 0x93a <uart_receive+0x4>
        ;

    /* Get and return received data from buffer */
    return UDR0;
     940:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
     944:	08 95       	ret

00000946 <__vector_18>:
ISR(USART_RX_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	cf 93       	push	r28
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
    unsigned char dummy;
    dummy = uart_receive();
     96a:	0e 94 9b 04 	call	0x936	; 0x936 <uart_receive>
    if (dummy == 'x') {
     96e:	88 37       	cpi	r24, 0x78	; 120
     970:	89 f5       	brne	.+98     	; 0x9d4 <__vector_18+0x8e>
        voltMaxAC = final;
     972:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <final>
     976:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <final+0x1>
     97a:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <final+0x2>
     97e:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <final+0x3>
     982:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <voltMaxAC>
     986:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <voltMaxAC+0x1>
     98a:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <voltMaxAC+0x2>
     98e:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <voltMaxAC+0x3>
        voltMinAC = final;
     992:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <voltMinAC>
     996:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <voltMinAC+0x1>
     99a:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <voltMinAC+0x2>
     99e:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <voltMinAC+0x3>
        voltMaxDC = dataVoltage;
     9a2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <dataVoltage>
     9a6:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <dataVoltage+0x1>
     9aa:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <dataVoltage+0x2>
     9ae:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <dataVoltage+0x3>
     9b2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <voltMaxDC>
     9b6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <voltMaxDC+0x1>
     9ba:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <voltMaxDC+0x2>
     9be:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <voltMaxDC+0x3>
        voltMinDC = dataVoltage;
     9c2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <voltMinDC>
     9c6:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <voltMinDC+0x1>
     9ca:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <voltMinDC+0x2>
     9ce:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <voltMinDC+0x3>
     9d2:	b7 c0       	rjmp	.+366    	; 0xb42 <__vector_18+0x1fc>
        // transmit final and datavoltage? or do if calc == 1 if calc == 2?

    } else if (dummy == 'R') {
     9d4:	82 35       	cpi	r24, 0x52	; 82
     9d6:	29 f4       	brne	.+10     	; 0x9e2 <__vector_18+0x9c>
        change_mode(3);
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 56 03 	call	0x6ac	; 0x6ac <change_mode>
     9e0:	b0 c0       	rjmp	.+352    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == 'C') {
     9e2:	83 34       	cpi	r24, 0x43	; 67
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <__vector_18+0xaa>
        change_mode(4);
     9e6:	84 e0       	ldi	r24, 0x04	; 4
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 56 03 	call	0x6ac	; 0x6ac <change_mode>
     9ee:	a9 c0       	rjmp	.+338    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == 'A') {
     9f0:	81 34       	cpi	r24, 0x41	; 65
     9f2:	29 f4       	brne	.+10     	; 0x9fe <__vector_18+0xb8>
        change_mode(2);
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 56 03 	call	0x6ac	; 0x6ac <change_mode>
     9fc:	a2 c0       	rjmp	.+324    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == 'D') {
     9fe:	84 34       	cpi	r24, 0x44	; 68
     a00:	29 f4       	brne	.+10     	; 0xa0c <__vector_18+0xc6>
        change_mode(1);
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 56 03 	call	0x6ac	; 0x6ac <change_mode>
     a0a:	9b c0       	rjmp	.+310    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '+') {
     a0c:	8b 32       	cpi	r24, 0x2B	; 43
     a0e:	a1 f4       	brne	.+40     	; 0xa38 <__vector_18+0xf2>
        // increase contThresh
        contThresh = eeprom_read_byte((const uint8_t*)20);
     a10:	84 e1       	ldi	r24, 0x14	; 20
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <eeprom_read_byte>
        contThresh++;
     a18:	8f 5f       	subi	r24, 0xFF	; 255
        if (contThresh > 200) {
     a1a:	89 3c       	cpi	r24, 0xC9	; 201
     a1c:	18 f4       	brcc	.+6      	; 0xa24 <__vector_18+0xde>
    } else if (dummy == 'D') {
        change_mode(1);
    } else if (dummy == '+') {
        // increase contThresh
        contThresh = eeprom_read_byte((const uint8_t*)20);
        contThresh++;
     a1e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <contThresh>
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <__vector_18+0xe4>
        if (contThresh > 200) {
            contThresh = 200;
     a24:	88 ec       	ldi	r24, 0xC8	; 200
     a26:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <contThresh>
        }
        eeprom_update_byte((uint8_t*)20, contThresh);
     a2a:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <contThresh>
     a2e:	84 e1       	ldi	r24, 0x14	; 20
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <eeprom_update_byte>
     a36:	85 c0       	rjmp	.+266    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '-') {
     a38:	8d 32       	cpi	r24, 0x2D	; 45
     a3a:	a1 f4       	brne	.+40     	; 0xa64 <__vector_18+0x11e>
        // decrease contThresh
        contThresh = eeprom_read_byte((const uint8_t*)20);
     a3c:	84 e1       	ldi	r24, 0x14	; 20
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <eeprom_read_byte>
        contThresh--;
     a44:	81 50       	subi	r24, 0x01	; 1
        if (contThresh > 200 || contThresh < 0) {
     a46:	89 3c       	cpi	r24, 0xC9	; 201
     a48:	18 f4       	brcc	.+6      	; 0xa50 <__vector_18+0x10a>
        }
        eeprom_update_byte((uint8_t*)20, contThresh);
    } else if (dummy == '-') {
        // decrease contThresh
        contThresh = eeprom_read_byte((const uint8_t*)20);
        contThresh--;
     a4a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <contThresh>
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__vector_18+0x110>
        if (contThresh > 200 || contThresh < 0) {
            contThresh = 20;
     a50:	84 e1       	ldi	r24, 0x14	; 20
     a52:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <contThresh>
        }
        eeprom_update_byte((uint8_t*)20, contThresh);
     a56:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <contThresh>
     a5a:	84 e1       	ldi	r24, 0x14	; 20
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <eeprom_update_byte>
     a62:	6f c0       	rjmp	.+222    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '1') {
     a64:	81 33       	cpi	r24, 0x31	; 49
     a66:	59 f4       	brne	.+22     	; 0xa7e <__vector_18+0x138>
        // set backlight to 1
        if (dummy)
            change_brightness(0);
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
        current_level = 0;
     a70:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <current_level+0x1>
     a74:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_level>
        OCR0A = 255;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	87 bd       	out	0x27, r24	; 39
     a7c:	62 c0       	rjmp	.+196    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '2') {
     a7e:	82 33       	cpi	r24, 0x32	; 50
     a80:	69 f4       	brne	.+26     	; 0xa9c <__vector_18+0x156>
        change_brightness(1);
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
        current_level = 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     a92:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
        OCR0A = 189;
     a96:	8d eb       	ldi	r24, 0xBD	; 189
     a98:	87 bd       	out	0x27, r24	; 39
     a9a:	53 c0       	rjmp	.+166    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '3') {
     a9c:	83 33       	cpi	r24, 0x33	; 51
     a9e:	69 f4       	brne	.+26     	; 0xaba <__vector_18+0x174>
        change_brightness(2);
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
        current_level = 2;
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     ab0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
        OCR0A = 126;
     ab4:	8e e7       	ldi	r24, 0x7E	; 126
     ab6:	87 bd       	out	0x27, r24	; 39
     ab8:	44 c0       	rjmp	.+136    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '4') {
     aba:	84 33       	cpi	r24, 0x34	; 52
     abc:	69 f4       	brne	.+26     	; 0xad8 <__vector_18+0x192>
        change_brightness(3);
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
        current_level = 3;
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     ace:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
        OCR0A = 63;
     ad2:	8f e3       	ldi	r24, 0x3F	; 63
     ad4:	87 bd       	out	0x27, r24	; 39
     ad6:	35 c0       	rjmp	.+106    	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == '5') {
     ad8:	85 33       	cpi	r24, 0x35	; 53
     ada:	61 f4       	brne	.+24     	; 0xaf4 <__vector_18+0x1ae>
        change_brightness(4);
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>
        current_level = 4;
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_level+0x1>
     aec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_level>
        OCR0A = 0;
     af0:	17 bc       	out	0x27, r1	; 39
     af2:	27 c0       	rjmp	.+78     	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == 'H') {
     af4:	88 34       	cpi	r24, 0x48	; 72
     af6:	39 f4       	brne	.+14     	; 0xb06 <__vector_18+0x1c0>
        hold = 1;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
     b00:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
     b04:	1e c0       	rjmp	.+60     	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == 'N') {
     b06:	8e 34       	cpi	r24, 0x4E	; 78
     b08:	29 f4       	brne	.+10     	; 0xb14 <__vector_18+0x1ce>
        hold = 0;
     b0a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
     b0e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
     b12:	17 c0       	rjmp	.+46     	; 0xb42 <__vector_18+0x1fc>
    } else if (dummy == 'm') {
     b14:	8d 36       	cpi	r24, 0x6D	; 109
     b16:	a9 f4       	brne	.+42     	; 0xb42 <__vector_18+0x1fc>
        unsigned char x;
        lcd_gotoxy(0, 3);
     b18:	63 e0       	ldi	r22, 0x03	; 3
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
        uint8_t i = 0;
     b20:	c0 e0       	ldi	r28, 0x00	; 0
        while ((x = uart_receive()) != '\n') {
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <__vector_18+0x1e4>
            lcd_putc(x);
     b24:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
            i++;
     b28:	cf 5f       	subi	r28, 0xFF	; 255
        hold = 0;
    } else if (dummy == 'm') {
        unsigned char x;
        lcd_gotoxy(0, 3);
        uint8_t i = 0;
        while ((x = uart_receive()) != '\n') {
     b2a:	0e 94 9b 04 	call	0x936	; 0x936 <uart_receive>
     b2e:	8a 30       	cpi	r24, 0x0A	; 10
     b30:	c9 f7       	brne	.-14     	; 0xb24 <__vector_18+0x1de>
            lcd_putc(x);
            i++;
        }
        while (i < 16) {
     b32:	c0 31       	cpi	r28, 0x10	; 16
     b34:	30 f4       	brcc	.+12     	; 0xb42 <__vector_18+0x1fc>
            lcd_putc(' ');
     b36:	80 e2       	ldi	r24, 0x20	; 32
     b38:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
            i++;
     b3c:	cf 5f       	subi	r28, 0xFF	; 255
        uint8_t i = 0;
        while ((x = uart_receive()) != '\n') {
            lcd_putc(x);
            i++;
        }
        while (i < 16) {
     b3e:	c0 31       	cpi	r28, 0x10	; 16
     b40:	d1 f7       	brne	.-12     	; 0xb36 <__vector_18+0x1f0>
            lcd_putc(' ');
            i++;
        }
    }
}
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	cf 91       	pop	r28
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <ads1115_write>:

/*******************************************************************/
/*                    ADS1115 FUNCTIONS                            */
void ads1115_write(uint8_t addr, uint8_t pointerReg, uint16_t configReg)
{
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	16 2f       	mov	r17, r22
     b6e:	ea 01       	movw	r28, r20
    /*
     * write bytes to the config register for reading after
     */
    // send start condition and wait
    i2c_start_wait((addr << 1) + I2C_WRITE);
     b70:	88 0f       	add	r24, r24
     b72:	0e 94 2b 02 	call	0x456	; 0x456 <i2c_start_wait>
    // write to pointer reg - config register setting
    i2c_write(pointerReg);
     b76:	81 2f       	mov	r24, r17
     b78:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_write>
    // write data for config reg
    i2c_write(configReg >> 8);
     b7c:	8d 2f       	mov	r24, r29
     b7e:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_write>
    i2c_write((configReg && 0xFF));
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	cd 2b       	or	r28, r29
     b86:	09 f4       	brne	.+2      	; 0xb8a <ads1115_write+0x24>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_write>
    // send stop condition
    i2c_stop();
     b8e:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_stop>

    return;
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	08 95       	ret

00000b9a <ads1115_read>:
uint16_t ads1115_read(uint8_t addr, uint8_t pointerReg)
{
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	d6 2f       	mov	r29, r22
    /*
     * read from conversion register from ads1115
     */
    // send start condition and wait
    i2c_start_wait((addr << 1) + I2C_WRITE);
     ba0:	c8 2f       	mov	r28, r24
     ba2:	cc 0f       	add	r28, r28
     ba4:	8c 2f       	mov	r24, r28
     ba6:	0e 94 2b 02 	call	0x456	; 0x456 <i2c_start_wait>
    // write to the point reg - conversion register setting
    i2c_write(pointerReg);
     baa:	8d 2f       	mov	r24, r29
     bac:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_write>
    // send stop
    i2c_stop();
     bb0:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_stop>
    // read 16 bit adc conversion
    i2c_rep_start((addr << 1) + I2C_READ);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 0f       	add	r24, r28
     bb8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <i2c_rep_start>
    uint8_t MSB = i2c_readAck();
     bbc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i2c_readAck>
     bc0:	d8 2f       	mov	r29, r24
    uint8_t LSB = i2c_readNak();
     bc2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <i2c_readNak>
     bc6:	c8 2f       	mov	r28, r24
    // send stop
    i2c_stop();
     bc8:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_stop>

    uint16_t data = (MSB << 8 | LSB);
    return data;
     bcc:	8c 2f       	mov	r24, r28
     bce:	90 e0       	ldi	r25, 0x00	; 0
}
     bd0:	9d 2b       	or	r25, r29
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <ads1115_read_SE>:
uint16_t ads1115_read_SE(uint8_t addr, uint16_t configReg)
{
     bd8:	cf 93       	push	r28
     bda:	c8 2f       	mov	r28, r24
     bdc:	ab 01       	movw	r20, r22
    /*
     * Read from channel 0 on ads1115 for a given config reg
     */
    ads1115_write(addr, ADS1115_REG_CONFIG, configReg);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	0e 94 b3 05 	call	0xb66	; 0xb66 <ads1115_write>
     be4:	8f ec       	ldi	r24, 0xCF	; 207
     be6:	97 e0       	ldi	r25, 0x07	; 7
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <ads1115_read_SE+0x10>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <ads1115_read_SE+0x16>
     bee:	00 00       	nop
    _delay_ms(8);
    return ads1115_read(addr, ADS1115_REG_CONVERSION);
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	8c 2f       	mov	r24, r28
     bf4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <ads1115_read>
}
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <ads1115_read_DIFF_A2_A3>:
int16_t ads1115_read_DIFF_A2_A3(uint8_t addr, uint16_t configReg)
{
     bfc:	cf 93       	push	r28
     bfe:	c8 2f       	mov	r28, r24
     c00:	ab 01       	movw	r20, r22
    /*
     * Read from channel 2 and 3 in diff mode
     */
    ads1115_write(addr, ADS1115_REG_CONFIG, configReg);
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	0e 94 b3 05 	call	0xb66	; 0xb66 <ads1115_write>
    //_delay_ms(8);
    return (int16_t)ads1115_read(addr, ADS1115_REG_CONVERSION);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	8c 2f       	mov	r24, r28
     c0c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <ads1115_read>
}
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <ALRT_init>:
void ALRT_init(void)
{
    DDRD &= 0xF3;
     c14:	8a b1       	in	r24, 0x0a	; 10
     c16:	83 7f       	andi	r24, 0xF3	; 243
     c18:	8a b9       	out	0x0a, r24	; 10
    DDRD |= 0xF0;
     c1a:	8a b1       	in	r24, 0x0a	; 10
     c1c:	80 6f       	ori	r24, 0xF0	; 240
     c1e:	8a b9       	out	0x0a, r24	; 10

    PORTD = 0x0C;
     c20:	8c e0       	ldi	r24, 0x0C	; 12
     c22:	8b b9       	out	0x0b, r24	; 11
    EICRA = (0 << ISC00) | (1 << ISC01);
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    EIMSK = (1 << INT0);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	8d bb       	out	0x1d, r24	; 29
     c2e:	08 95       	ret

00000c30 <main>:
        }
    }
}

int main(void)
{
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	e8 97       	sbiw	r28, 0x38	; 56
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
    customChar();
     c44:	0e 94 87 02 	call	0x50e	; 0x50e <customChar>
     c48:	2f e9       	ldi	r18, 0x9F	; 159
     c4a:	86 e8       	ldi	r24, 0x86	; 134
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	80 40       	sbci	r24, 0x00	; 0
     c52:	90 40       	sbci	r25, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <main+0x1e>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <main+0x28>
     c58:	00 00       	nop
    _delay_ms(500);
    lcd_init(LCD_DISP_ON);
     c5a:	8c e0       	ldi	r24, 0x0C	; 12
     c5c:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_init>
    /* set bits 6 as outputs*/
    DDRD = (1 << PORTD6);
     c60:	80 e4       	ldi	r24, 0x40	; 64
     c62:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << PORTD7);
     c64:	57 98       	cbi	0x0a, 7	; 10
    /* set port B as output*/
    DDRC &= 0xF9;
     c66:	87 b1       	in	r24, 0x07	; 7
     c68:	89 7f       	andi	r24, 0xF9	; 249
     c6a:	87 b9       	out	0x07, r24	; 7

    /* relevant bitshift to activate pullup resistor*/
    PORTC = (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (1 << PORTC3);
     c6c:	1f e0       	ldi	r17, 0x0F	; 15
     c6e:	18 b9       	out	0x08, r17	; 8

    /*clear the LCD screen*/
    lcd_clrscr();
     c70:	0e 94 90 01 	call	0x320	; 0x320 <lcd_clrscr>
    /*create the bar and relevant messages*/
    // int current_level = 4;
    int current_mode = 1;

    /*Set Up Interrupts*/
    PCICR = (1 << PCIE1);
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>

    // Trigger interrupts on changes to the following pins (C0, C1, C2, C3)
    PCMSK1 = (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);
     c7a:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>

    /* set output compare values*/
    OCR0A = 0;
     c7e:	17 bc       	out	0x27, r1	; 39
    change_mode(current_mode);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 56 03 	call	0x6ac	; 0x6ac <change_mode>
    change_brightness(current_level);
     c88:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_level>
     c8c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_level+0x1>
     c90:	0e 94 2a 03 	call	0x654	; 0x654 <change_brightness>

    /* set up timer/counter 0 for past PWM, set on compare match */
    TCCR0A = (1 << COM0A0) | (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
     c94:	83 ec       	ldi	r24, 0xC3	; 195
     c96:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS00);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	85 bd       	out	0x25, r24	; 37
    /*UART I2C INIT*/
    // uint8_t UBBRValue = FCPU/(16*BAUD)-1;

    // uint8_t UBBRValue = 49;
    uart_init(12);
     c9c:	8c e0       	ldi	r24, 0x0C	; 12
     c9e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_init>
    i2c_init();
     ca2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <i2c_init>
    ALRT_init();
     ca6:	0e 94 0a 06 	call	0xc14	; 0xc14 <ALRT_init>

    /*
    contThresh = 20;
    sprintf(cont, "%.1f", (double)contThresh/10);
    */
    contThresh = eeprom_read_byte((const uint8_t*)20);
     caa:	84 e1       	ldi	r24, 0x14	; 20
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <eeprom_read_byte>
     cb2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <contThresh>
    if (contThresh > 200 || contThresh < 0) {
     cb6:	89 3c       	cpi	r24, 0xC9	; 201
     cb8:	28 f0       	brcs	.+10     	; 0xcc4 <main+0x94>
        eeprom_update_byte((uint8_t*)20, 20);
     cba:	64 e1       	ldi	r22, 0x14	; 20
     cbc:	84 e1       	ldi	r24, 0x14	; 20
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <eeprom_update_byte>
    }

    sei();
     cc4:	78 94       	sei
                }
                // transmit rest of packet
                uart_transmit(':');
                uart_transmit(current_level + '0');

                memset(voltageString, 0, sizeof(voltageString));
     cc6:	5e 01       	movw	r10, r28
     cc8:	a1 e2       	ldi	r26, 0x21	; 33
     cca:	aa 0e       	add	r10, r26
     ccc:	b1 1c       	adc	r11, r1
                memset(thresh, 0, sizeof(thresh));
     cce:	1e 01       	movw	r2, r28
     cd0:	b9 e2       	ldi	r27, 0x29	; 41
     cd2:	2b 0e       	add	r2, r27
     cd4:	31 1c       	adc	r3, r1
                            lcd_putc(voltageString[3]);
                            lcd_putc('k');
                            lcd_putc(244);

                        } else {
                            sprintf(voltageString, "%.3f", resVoltage);
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f8 e6       	ldi	r31, 0x68	; 104
     cda:	6f 2e       	mov	r6, r31
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	7f 2e       	mov	r7, r31
     ce0:	f0 2d       	mov	r31, r0
                if (final < voltMinAC) {
                    voltMinAC = final;
                }
                // transmit voltage string
                sprintf(voltageString, "%.3f", final);
                sprintf(buff, "%.3f", voltMaxAC);
     ce2:	fe 01       	movw	r30, r28
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	2f 01       	movw	r4, r30
                sprintf(buff2, "%.3f", voltMinAC);
     ce8:	4e 01       	movw	r8, r28
     cea:	f1 e1       	ldi	r31, 0x11	; 17
     cec:	8f 0e       	add	r8, r31
     cee:	91 1c       	adc	r9, r1

    // resistance parameters

    /* Replace with your application code */
    while (1) {
        if (hold == 1) {
     cf0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     cf4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	b1 f4       	brne	.+44     	; 0xd28 <main+0xf8>
            // print hold icon
            lcd_gotoxy(19, 0);
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	83 e1       	ldi	r24, 0x13	; 19
     d00:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
            lcd_putc(5);
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
            uart_transmit('H');
     d0a:	88 e4       	ldi	r24, 0x48	; 72
     d0c:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
            uart_newline();
     d10:	0e 94 94 04 	call	0x928	; 0x928 <uart_newline>
     d14:	2f e7       	ldi	r18, 0x7F	; 127
     d16:	88 e3       	ldi	r24, 0x38	; 56
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	21 50       	subi	r18, 0x01	; 1
     d1c:	80 40       	sbci	r24, 0x00	; 0
     d1e:	90 40       	sbci	r25, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <main+0xea>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <main+0xf4>
     d24:	00 00       	nop
     d26:	e4 cf       	rjmp	.-56     	; 0xcf0 <main+0xc0>
            _delay_ms(400);
        } else {
            lcd_gotoxy(19, 0);
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	83 e1       	ldi	r24, 0x13	; 19
     d2c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
            lcd_putc(' ');
     d30:	80 e2       	ldi	r24, 0x20	; 32
     d32:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>

            lcd_gotoxy(18, 0);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	82 e1       	ldi	r24, 0x12	; 18
     d3a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
            lcd_putc(' ');
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>

            if ((PIND) & (1 << PIND7)) {
     d44:	4f 9b       	sbis	0x09, 7	; 9
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <main+0x126>
                lcd_gotoxy(18, 0);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	82 e1       	ldi	r24, 0x12	; 18
     d4c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_putc(4);
     d50:	84 e0       	ldi	r24, 0x04	; 4
     d52:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
            }

            if (calc == 1) {
     d56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d5a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	91 05       	cpc	r25, r1
     d62:	09 f0       	breq	.+2      	; 0xd66 <main+0x136>
     d64:	b3 c0       	rjmp	.+358    	; 0xecc <main+0x29c>
                /**************************************************************/
                /*					DC VOLTAGE								  */

                MCUCR &= ~(1 << PUD);
     d66:	85 b7       	in	r24, 0x35	; 53
     d68:	8f 7e       	andi	r24, 0xEF	; 239
     d6a:	85 bf       	out	0x35, r24	; 53
                dataBinary = ads1115_read_DIFF_A2_A3(ADS1115_ADDR, ads1115ConfigVoltage);
     d6c:	63 ee       	ldi	r22, 0xE3	; 227
     d6e:	74 eb       	ldi	r23, 0xB4	; 180
     d70:	88 e4       	ldi	r24, 0x48	; 72
     d72:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ads1115_read_DIFF_A2_A3>
                dataVoltage = (dataBinary + 137.4546) / 1175.4182;
     d76:	bc 01       	movw	r22, r24
     d78:	99 0f       	add	r25, r25
     d7a:	88 0b       	sbc	r24, r24
     d7c:	99 0b       	sbc	r25, r25
     d7e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
     d82:	21 e6       	ldi	r18, 0x61	; 97
     d84:	34 e7       	ldi	r19, 0x74	; 116
     d86:	49 e0       	ldi	r20, 0x09	; 9
     d88:	53 e4       	ldi	r21, 0x43	; 67
     d8a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
     d8e:	22 e6       	ldi	r18, 0x62	; 98
     d90:	3d ee       	ldi	r19, 0xED	; 237
     d92:	42 e9       	ldi	r20, 0x92	; 146
     d94:	54 e4       	ldi	r21, 0x44	; 68
     d96:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
     d9e:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <dataVoltage>
     da2:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <dataVoltage+0x1>
     da6:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <dataVoltage+0x2>
     daa:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <dataVoltage+0x3>
                if (dataVoltage > voltMaxDC) {
     dae:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <voltMaxDC>
     db2:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <voltMaxDC+0x1>
     db6:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <voltMaxDC+0x2>
     dba:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <voltMaxDC+0x3>
     dbe:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
     dc2:	18 16       	cp	r1, r24
     dc4:	44 f4       	brge	.+16     	; 0xdd6 <main+0x1a6>
                    voltMaxDC = dataVoltage;
     dc6:	c0 92 90 01 	sts	0x0190, r12	; 0x800190 <voltMaxDC>
     dca:	d0 92 91 01 	sts	0x0191, r13	; 0x800191 <voltMaxDC+0x1>
     dce:	e0 92 92 01 	sts	0x0192, r14	; 0x800192 <voltMaxDC+0x2>
     dd2:	f0 92 93 01 	sts	0x0193, r15	; 0x800193 <voltMaxDC+0x3>
                }
                if (dataVoltage < voltMinDC) {
     dd6:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <voltMinDC>
     dda:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <voltMinDC+0x1>
     dde:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <voltMinDC+0x2>
     de2:	50 91 8f 01 	lds	r21, 0x018F	; 0x80018f <voltMinDC+0x3>
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpsf2>
     dee:	88 23       	and	r24, r24
     df0:	0c f0       	brlt	.+2      	; 0xdf4 <main+0x1c4>
     df2:	83 c5       	rjmp	.+2822   	; 0x18fa <main+0xcca>
                    voltMinDC = dataVoltage;
     df4:	c0 92 8c 01 	sts	0x018C, r12	; 0x80018c <voltMinDC>
     df8:	d0 92 8d 01 	sts	0x018D, r13	; 0x80018d <voltMinDC+0x1>
     dfc:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <voltMinDC+0x2>
     e00:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <voltMinDC+0x3>
     e04:	7a c5       	rjmp	.+2804   	; 0x18fa <main+0xcca>
                sprintf(buff2, "%.3f", voltMinDC);
                sprintf(buff, "%.3f", voltMaxDC);
                uart_transmit('D');
                uart_transmit(':');
                for (int i = 0; i < sizeof(voltageString); i++) {
                    uart_transmit(voltageString[i]);
     e06:	d8 01       	movw	r26, r16
     e08:	8d 91       	ld	r24, X+
     e0a:	8d 01       	movw	r16, r26
     e0c:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                sprintf(voltageString, "%.3f", dataVoltage);
                sprintf(buff2, "%.3f", voltMinDC);
                sprintf(buff, "%.3f", voltMaxDC);
                uart_transmit('D');
                uart_transmit(':');
                for (int i = 0; i < sizeof(voltageString); i++) {
     e10:	02 15       	cp	r16, r2
     e12:	13 05       	cpc	r17, r3
     e14:	c1 f7       	brne	.-16     	; 0xe06 <main+0x1d6>
     e16:	ac c5       	rjmp	.+2904   	; 0x1970 <main+0xd40>
                    uart_transmit(voltageString[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff2); i++) {
                    uart_transmit(buff2[i]);
     e18:	f8 01       	movw	r30, r16
     e1a:	81 91       	ld	r24, Z+
     e1c:	8f 01       	movw	r16, r30
     e1e:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(':');
                for (int i = 0; i < sizeof(voltageString); i++) {
                    uart_transmit(voltageString[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff2); i++) {
     e22:	0a 15       	cp	r16, r10
     e24:	1b 05       	cpc	r17, r11
     e26:	c1 f7       	brne	.-16     	; 0xe18 <main+0x1e8>
     e28:	aa c5       	rjmp	.+2900   	; 0x197e <main+0xd4e>
                    uart_transmit(buff2[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff); i++) {
                    uart_transmit(buff[i]);
     e2a:	d8 01       	movw	r26, r16
     e2c:	8d 91       	ld	r24, X+
     e2e:	8d 01       	movw	r16, r26
     e30:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff2); i++) {
                    uart_transmit(buff2[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff); i++) {
     e34:	08 15       	cp	r16, r8
     e36:	19 05       	cpc	r17, r9
     e38:	c1 f7       	brne	.-16     	; 0xe2a <main+0x1fa>
                    uart_transmit(buff[i]);
                }
                uart_transmit(':');
     e3a:	8a e3       	ldi	r24, 0x3A	; 58
     e3c:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(current_level + '0');
     e40:	e4 e0       	ldi	r30, 0x04	; 4
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	80 81       	ld	r24, Z
     e46:	80 5d       	subi	r24, 0xD0	; 208
     e48:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>

                lcd_gotoxy(0, 2);
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts("Min:");
     e54:	8d e3       	ldi	r24, 0x3D	; 61
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_puts(buff2);
     e5c:	c4 01       	movw	r24, r8
     e5e:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_gotoxy(11, 2);
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	8b e0       	ldi	r24, 0x0B	; 11
     e66:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts("Max:");
     e6a:	82 e4       	ldi	r24, 0x42	; 66
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_puts(buff);
     e72:	c2 01       	movw	r24, r4
     e74:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>

                // put reading
                lcd_gotoxy(0, 1);
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts(voltageString);
     e80:	c5 01       	movw	r24, r10
     e82:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_gotoxy(9, 1);
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	89 e0       	ldi	r24, 0x09	; 9
     e8a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts("V");
     e8e:	87 e4       	ldi	r24, 0x47	; 71
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                memset(voltageString, 0, sizeof(voltageString));
     e96:	d5 01       	movw	r26, r10
     e98:	e8 e0       	ldi	r30, 0x08	; 8
     e9a:	1d 92       	st	X+, r1
     e9c:	ea 95       	dec	r30
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <main+0x26a>
                memset(buff2, 0, sizeof(buff2));
     ea0:	d4 01       	movw	r26, r8
     ea2:	e0 e1       	ldi	r30, 0x10	; 16
     ea4:	1d 92       	st	X+, r1
     ea6:	ea 95       	dec	r30
     ea8:	e9 f7       	brne	.-6      	; 0xea4 <main+0x274>
                memset(buff, 0, sizeof(buff));
     eaa:	d2 01       	movw	r26, r4
     eac:	e0 e1       	ldi	r30, 0x10	; 16
     eae:	1d 92       	st	X+, r1
     eb0:	ea 95       	dec	r30
     eb2:	e9 f7       	brne	.-6      	; 0xeae <main+0x27e>
                uart_newline();
     eb4:	0e 94 94 04 	call	0x928	; 0x928 <uart_newline>
     eb8:	ff e7       	ldi	r31, 0x7F	; 127
     eba:	28 e3       	ldi	r18, 0x38	; 56
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	f1 50       	subi	r31, 0x01	; 1
     ec0:	20 40       	sbci	r18, 0x00	; 0
     ec2:	80 40       	sbci	r24, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <main+0x28e>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <main+0x298>
     ec8:	00 00       	nop
     eca:	12 cf       	rjmp	.-476    	; 0xcf0 <main+0xc0>
                _delay_ms(400);
            } else if (calc == 2) {
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 05       	cpc	r25, r1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <main+0x2a4>
     ed2:	d7 c0       	rjmp	.+430    	; 0x1082 <main+0x452>
                /*************************************************************/
                /*					AC VOLTAGE								 */
                MCUCR &= ~(1 << PUD);
     ed4:	85 b7       	in	r24, 0x35	; 53
     ed6:	8f 7e       	andi	r24, 0xEF	; 239
     ed8:	85 bf       	out	0x35, r24	; 53
     eda:	04 e6       	ldi	r16, 0x64	; 100
     edc:	10 e0       	ldi	r17, 0x00	; 0
                sum = 0;
     ede:	c1 2c       	mov	r12, r1
     ee0:	d1 2c       	mov	r13, r1
     ee2:	e1 2c       	mov	r14, r1
     ee4:	f1 2c       	mov	r15, r1
                for (int i = 0; i < 100; i++) {
                    dataBinary = ads1115_read_DIFF_A2_A3(ADS1115_ADDR, ads1115ConfigVoltage);
     ee6:	63 ee       	ldi	r22, 0xE3	; 227
     ee8:	74 eb       	ldi	r23, 0xB4	; 180
     eea:	88 e4       	ldi	r24, 0x48	; 72
     eec:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ads1115_read_DIFF_A2_A3>
                    // dataVoltage = ((double)dataBinary-32.0)/1006.4;
                    dataVoltage = (dataBinary + 137.4546) / 1175.4182;
     ef0:	bc 01       	movw	r22, r24
     ef2:	99 0f       	add	r25, r25
     ef4:	88 0b       	sbc	r24, r24
     ef6:	99 0b       	sbc	r25, r25
     ef8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
     efc:	21 e6       	ldi	r18, 0x61	; 97
     efe:	34 e7       	ldi	r19, 0x74	; 116
     f00:	49 e0       	ldi	r20, 0x09	; 9
     f02:	53 e4       	ldi	r21, 0x43	; 67
     f04:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
     f08:	22 e6       	ldi	r18, 0x62	; 98
     f0a:	3d ee       	ldi	r19, 0xED	; 237
     f0c:	42 e9       	ldi	r20, 0x92	; 146
     f0e:	54 e4       	ldi	r21, 0x44	; 68
     f10:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
     f14:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <dataVoltage>
     f18:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <dataVoltage+0x1>
     f1c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <dataVoltage+0x2>
     f20:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <dataVoltage+0x3>
                    sum += (dataVoltage * dataVoltage);
     f24:	9b 01       	movw	r18, r22
     f26:	ac 01       	movw	r20, r24
     f28:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsf3>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	6c 2d       	mov	r22, r12
     f32:	7d 2d       	mov	r23, r13
     f34:	8e 2d       	mov	r24, r14
     f36:	9f 2d       	mov	r25, r15
     f38:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
     f3c:	c6 2e       	mov	r12, r22
     f3e:	d7 2e       	mov	r13, r23
     f40:	e8 2e       	mov	r14, r24
     f42:	f9 2e       	mov	r15, r25
     f44:	01 50       	subi	r16, 0x01	; 1
     f46:	11 09       	sbc	r17, r1
            } else if (calc == 2) {
                /*************************************************************/
                /*					AC VOLTAGE								 */
                MCUCR &= ~(1 << PUD);
                sum = 0;
                for (int i = 0; i < 100; i++) {
     f48:	71 f6       	brne	.-100    	; 0xee6 <main+0x2b6>
                    // dataVoltage = ((double)dataBinary-32.0)/1006.4;
                    dataVoltage = (dataBinary + 137.4546) / 1175.4182;
                    sum += (dataVoltage * dataVoltage);
                }
                sum = sum / 100;
                final = sqrt(sum);
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	48 ec       	ldi	r20, 0xC8	; 200
     f50:	52 e4       	ldi	r21, 0x42	; 66
     f52:	6c 2d       	mov	r22, r12
     f54:	7d 2d       	mov	r23, r13
     f56:	8e 2d       	mov	r24, r14
     f58:	9f 2d       	mov	r25, r15
     f5a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
     f5e:	0e 94 04 10 	call	0x2008	; 0x2008 <sqrt>
     f62:	6b 01       	movw	r12, r22
     f64:	7c 01       	movw	r14, r24
     f66:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <final>
     f6a:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <final+0x1>
     f6e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <final+0x2>
     f72:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <final+0x3>
                if (final > voltMaxAC) {
     f76:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <voltMaxAC>
     f7a:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <voltMaxAC+0x1>
     f7e:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <voltMaxAC+0x2>
     f82:	50 91 8b 01 	lds	r21, 0x018B	; 0x80018b <voltMaxAC+0x3>
     f86:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	44 f4       	brge	.+16     	; 0xf9e <main+0x36e>
                    voltMaxAC = final;
     f8e:	c0 92 88 01 	sts	0x0188, r12	; 0x800188 <voltMaxAC>
     f92:	d0 92 89 01 	sts	0x0189, r13	; 0x800189 <voltMaxAC+0x1>
     f96:	e0 92 8a 01 	sts	0x018A, r14	; 0x80018a <voltMaxAC+0x2>
     f9a:	f0 92 8b 01 	sts	0x018B, r15	; 0x80018b <voltMaxAC+0x3>
                }
                if (final < voltMinAC) {
     f9e:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <voltMinAC>
     fa2:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <voltMinAC+0x1>
     fa6:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <voltMinAC+0x2>
     faa:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <voltMinAC+0x3>
     fae:	c7 01       	movw	r24, r14
     fb0:	b6 01       	movw	r22, r12
     fb2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	0c f0       	brlt	.+2      	; 0xfbc <main+0x38c>
     fba:	e8 c4       	rjmp	.+2512   	; 0x198c <main+0xd5c>
                    voltMinAC = final;
     fbc:	c0 92 84 01 	sts	0x0184, r12	; 0x800184 <voltMinAC>
     fc0:	d0 92 85 01 	sts	0x0185, r13	; 0x800185 <voltMinAC+0x1>
     fc4:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <voltMinAC+0x2>
     fc8:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <voltMinAC+0x3>
     fcc:	df c4       	rjmp	.+2494   	; 0x198c <main+0xd5c>
                sprintf(buff2, "%.3f", voltMinAC);
                // transmit packet
                uart_transmit('A');
                uart_transmit(':');
                for (int i = 0; i < sizeof(voltageString); i++) {
                    uart_transmit(voltageString[i]);
     fce:	d8 01       	movw	r26, r16
     fd0:	8d 91       	ld	r24, X+
     fd2:	8d 01       	movw	r16, r26
     fd4:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                sprintf(buff, "%.3f", voltMaxAC);
                sprintf(buff2, "%.3f", voltMinAC);
                // transmit packet
                uart_transmit('A');
                uart_transmit(':');
                for (int i = 0; i < sizeof(voltageString); i++) {
     fd8:	20 16       	cp	r2, r16
     fda:	31 06       	cpc	r3, r17
     fdc:	c1 f7       	brne	.-16     	; 0xfce <main+0x39e>
     fde:	11 c5       	rjmp	.+2594   	; 0x1a02 <main+0xdd2>
                    uart_transmit(voltageString[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff2); i++) {
                    uart_transmit(buff2[i]);
     fe0:	f8 01       	movw	r30, r16
     fe2:	81 91       	ld	r24, Z+
     fe4:	8f 01       	movw	r16, r30
     fe6:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(':');
                for (int i = 0; i < sizeof(voltageString); i++) {
                    uart_transmit(voltageString[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff2); i++) {
     fea:	0a 15       	cp	r16, r10
     fec:	1b 05       	cpc	r17, r11
     fee:	c1 f7       	brne	.-16     	; 0xfe0 <main+0x3b0>
     ff0:	0f c5       	rjmp	.+2590   	; 0x1a10 <main+0xde0>
                    uart_transmit(buff2[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff); i++) {
                    uart_transmit(buff[i]);
     ff2:	d8 01       	movw	r26, r16
     ff4:	8d 91       	ld	r24, X+
     ff6:	8d 01       	movw	r16, r26
     ff8:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff2); i++) {
                    uart_transmit(buff2[i]);
                }
                uart_transmit(':');
                for (int i = 0; i < sizeof(buff); i++) {
     ffc:	08 15       	cp	r16, r8
     ffe:	19 05       	cpc	r17, r9
    1000:	c1 f7       	brne	.-16     	; 0xff2 <main+0x3c2>
                    uart_transmit(buff[i]);
                }
                uart_transmit(':');
    1002:	8a e3       	ldi	r24, 0x3A	; 58
    1004:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(current_level + '0');
    1008:	e4 e0       	ldi	r30, 0x04	; 4
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	80 81       	ld	r24, Z
    100e:	80 5d       	subi	r24, 0xD0	; 208
    1010:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>

                uart_newline();
    1014:	0e 94 94 04 	call	0x928	; 0x928 <uart_newline>
                lcd_gotoxy(0, 1);
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts(voltageString);
    1020:	c5 01       	movw	r24, r10
    1022:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_gotoxy(6, 1);
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts("VRMS");
    102e:	89 e4       	ldi	r24, 0x49	; 73
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_gotoxy(0, 2);
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts("Min:");
    103e:	8d e3       	ldi	r24, 0x3D	; 61
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_puts(buff2);
    1046:	c4 01       	movw	r24, r8
    1048:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_gotoxy(11, 2);
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	8b e0       	ldi	r24, 0x0B	; 11
    1050:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                lcd_puts("Max:");
    1054:	82 e4       	ldi	r24, 0x42	; 66
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                lcd_puts(buff);
    105c:	c2 01       	movw	r24, r4
    105e:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                memset(voltageString, 0, sizeof(voltageString));
    1062:	d5 01       	movw	r26, r10
    1064:	e8 e0       	ldi	r30, 0x08	; 8
    1066:	1d 92       	st	X+, r1
    1068:	ea 95       	dec	r30
    106a:	e9 f7       	brne	.-6      	; 0x1066 <main+0x436>
                memset(buff2, 0, sizeof(buff2));
    106c:	d4 01       	movw	r26, r8
    106e:	e0 e1       	ldi	r30, 0x10	; 16
    1070:	1d 92       	st	X+, r1
    1072:	ea 95       	dec	r30
    1074:	e9 f7       	brne	.-6      	; 0x1070 <main+0x440>
                memset(buff, 0, sizeof(buff));
    1076:	d2 01       	movw	r26, r4
    1078:	e0 e1       	ldi	r30, 0x10	; 16
    107a:	1d 92       	st	X+, r1
    107c:	ea 95       	dec	r30
    107e:	e9 f7       	brne	.-6      	; 0x107a <main+0x44a>
    1080:	37 ce       	rjmp	.-914    	; 0xcf0 <main+0xc0>
            } else if (calc == 4 || calc == 3) {
    1082:	9c 01       	movw	r18, r24
    1084:	23 50       	subi	r18, 0x03	; 3
    1086:	31 09       	sbc	r19, r1
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	08 f0       	brcs	.+2      	; 0x1090 <main+0x460>
    108e:	30 ce       	rjmp	.-928    	; 0xcf0 <main+0xc0>
                /*************************************************************/
                /*					  CONTINUITY & resistance							*/
                if (calc == 3) {
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	39 f4       	brne	.+14     	; 0x10a4 <main+0x474>
                    uart_transmit('R');
    1096:	82 e5       	ldi	r24, 0x52	; 82
    1098:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                    uart_transmit(':');
    109c:	8a e3       	ldi	r24, 0x3A	; 58
    109e:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <main+0x484>
                } else if (calc == 4) {
    10a4:	04 97       	sbiw	r24, 0x04	; 4
    10a6:	a1 f4       	brne	.+40     	; 0x10d0 <main+0x4a0>
                    uart_transmit('C');
    10a8:	83 e4       	ldi	r24, 0x43	; 67
    10aa:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                    uart_transmit(':');
    10ae:	8a e3       	ldi	r24, 0x3A	; 58
    10b0:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                }

                if (calc == 3) {
    10b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10bc:	03 97       	sbiw	r24, 0x03	; 3
    10be:	41 f4       	brne	.+16     	; 0x10d0 <main+0x4a0>
                    lcd_gotoxy(0, 2);
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                    lcd_puts("                    ");
    10c8:	8e e4       	ldi	r24, 0x4E	; 78
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                }
                DDRD |= (1 << DDD3); // 100k resistor OUPUT
    10d0:	53 9a       	sbi	0x0a, 3	; 10
                PORTD |= (1 << PIND3); // 100k resistor HIGH
    10d2:	5b 9a       	sbi	0x0b, 3	; 11
                DDRD &= ~(1 << PIND4); // 1k resistor INPUT - high Zin
    10d4:	54 98       	cbi	0x0a, 4	; 10
                MCUCR |= (1 << PUD); // hopefully hi zin??
    10d6:	85 b7       	in	r24, 0x35	; 53
    10d8:	80 61       	ori	r24, 0x10	; 16
    10da:	85 bf       	out	0x35, r24	; 53
    10dc:	05 e0       	ldi	r16, 0x05	; 5
    10de:	10 e0       	ldi	r17, 0x00	; 0

                for (int i = 0; i < 5; i++) {
                    dataBinary = ads1115_read_SE(ADS1115_ADDR, ads1115ConfigRes);
    10e0:	63 ee       	ldi	r22, 0xE3	; 227
    10e2:	72 ec       	ldi	r23, 0xC2	; 194
    10e4:	88 e4       	ldi	r24, 0x48	; 72
    10e6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ads1115_read_SE>
    10ea:	01 50       	subi	r16, 0x01	; 1
    10ec:	11 09       	sbc	r17, r1
                DDRD |= (1 << DDD3); // 100k resistor OUPUT
                PORTD |= (1 << PIND3); // 100k resistor HIGH
                DDRD &= ~(1 << PIND4); // 1k resistor INPUT - high Zin
                MCUCR |= (1 << PUD); // hopefully hi zin??

                for (int i = 0; i < 5; i++) {
    10ee:	c1 f7       	brne	.-16     	; 0x10e0 <main+0x4b0>
                    dataBinary = ads1115_read_SE(ADS1115_ADDR, ads1115ConfigRes);
                }
                // dataVoltage = (dataBinary+39.9944)/8096.948;
                resVoltage = (dataBinary + 97.4) / 8120.866;
    10f0:	bc 01       	movw	r22, r24
    10f2:	99 0f       	add	r25, r25
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    10fc:	2d ec       	ldi	r18, 0xCD	; 205
    10fe:	3c ec       	ldi	r19, 0xCC	; 204
    1100:	42 ec       	ldi	r20, 0xC2	; 194
    1102:	52 e4       	ldi	r21, 0x42	; 66
    1104:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
    1108:	2e ee       	ldi	r18, 0xEE	; 238
    110a:	36 ec       	ldi	r19, 0xC6	; 198
    110c:	4d ef       	ldi	r20, 0xFD	; 253
    110e:	55 e4       	ldi	r21, 0x45	; 69
    1110:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    1114:	6b 01       	movw	r12, r22
    1116:	7c 01       	movw	r14, r24
    1118:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <resVoltage>
    111c:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <resVoltage+0x1>
    1120:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <resVoltage+0x2>
    1124:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <resVoltage+0x3>

                if (resVoltage > 0.14792) {
    1128:	27 e5       	ldi	r18, 0x57	; 87
    112a:	38 e7       	ldi	r19, 0x78	; 120
    112c:	47 e1       	ldi	r20, 0x17	; 23
    112e:	5e e3       	ldi	r21, 0x3E	; 62
    1130:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <main+0x50a>
    1138:	d7 c1       	rjmp	.+942    	; 0x14e8 <main+0x8b8>
                    resVoltage = ((-100280 * resVoltage) / (resVoltage - 3.23)) - resOffset;
    113a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <resOffset>
    113e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <resOffset+0x1>
    1142:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <resOffset+0x2>
    1146:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <resOffset+0x3>
    114a:	89 ab       	std	Y+49, r24	; 0x31
    114c:	9a ab       	std	Y+50, r25	; 0x32
    114e:	ab ab       	std	Y+51, r26	; 0x33
    1150:	bc ab       	std	Y+52, r27	; 0x34
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3c ed       	ldi	r19, 0xDC	; 220
    1156:	43 ec       	ldi	r20, 0xC3	; 195
    1158:	57 ec       	ldi	r21, 0xC7	; 199
    115a:	c7 01       	movw	r24, r14
    115c:	b6 01       	movw	r22, r12
    115e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsf3>
    1162:	6d ab       	std	Y+53, r22	; 0x35
    1164:	7e ab       	std	Y+54, r23	; 0x36
    1166:	8f ab       	std	Y+55, r24	; 0x37
    1168:	98 af       	std	Y+56, r25	; 0x38
    116a:	22 e5       	ldi	r18, 0x52	; 82
    116c:	38 eb       	ldi	r19, 0xB8	; 184
    116e:	4e e4       	ldi	r20, 0x4E	; 78
    1170:	50 e4       	ldi	r21, 0x40	; 64
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	6d a9       	ldd	r22, Y+53	; 0x35
    1180:	7e a9       	ldd	r23, Y+54	; 0x36
    1182:	8f a9       	ldd	r24, Y+55	; 0x37
    1184:	98 ad       	ldd	r25, Y+56	; 0x38
    1186:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    118a:	29 a9       	ldd	r18, Y+49	; 0x31
    118c:	3a a9       	ldd	r19, Y+50	; 0x32
    118e:	4b a9       	ldd	r20, Y+51	; 0x33
    1190:	5c a9       	ldd	r21, Y+52	; 0x34
    1192:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    1196:	6b 01       	movw	r12, r22
    1198:	7c 01       	movw	r14, r24
    119a:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <resVoltage>
    119e:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <resVoltage+0x1>
    11a2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <resVoltage+0x2>
    11a6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <resVoltage+0x3>
                    if (resVoltage > 2000000)
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	34 e2       	ldi	r19, 0x24	; 36
    11ae:	44 ef       	ldi	r20, 0xF4	; 244
    11b0:	59 e4       	ldi	r21, 0x49	; 73
    11b2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	3c f5       	brge	.+78     	; 0x1208 <main+0x5d8>
                        if (resVoltage > 970000) {
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	31 ed       	ldi	r19, 0xD1	; 209
    11be:	4c e6       	ldi	r20, 0x6C	; 108
    11c0:	59 e4       	ldi	r21, 0x49	; 73
    11c2:	c7 01       	movw	r24, r14
    11c4:	b6 01       	movw	r22, r12
    11c6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    11ca:	18 16       	cp	r1, r24
    11cc:	ec f4       	brge	.+58     	; 0x1208 <main+0x5d8>
                            resVoltage = 1000000;
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	94 e2       	ldi	r25, 0x24	; 36
    11d2:	a4 e7       	ldi	r26, 0x74	; 116
    11d4:	b9 e4       	ldi	r27, 0x49	; 73
    11d6:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <resVoltage>
    11da:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <resVoltage+0x1>
    11de:	a0 93 9a 01 	sts	0x019A, r26	; 0x80019a <resVoltage+0x2>
    11e2:	b0 93 9b 01 	sts	0x019B, r27	; 0x80019b <resVoltage+0x3>
                        }
                    if (calc == 4) {
    11e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    11ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    11ee:	04 97       	sbiw	r24, 0x04	; 4
    11f0:	89 f0       	breq	.+34     	; 0x1214 <main+0x5e4>
                        lcd_gotoxy(0, 2);
                        lcd_puts("           ");
                        lcd_gotoxy(0, 2);
                        lcd_puts("OPEN");
                    }
                    if (log10(resVoltage) < 6 && log10(resVoltage) > 5) {
    11f2:	10 e0       	ldi	r17, 0x00	; 0
    11f4:	04 e2       	ldi	r16, 0x24	; 36
    11f6:	0f 2e       	mov	r0, r31
    11f8:	f4 e7       	ldi	r31, 0x74	; 116
    11fa:	ff 2e       	mov	r15, r31
    11fc:	f0 2d       	mov	r31, r0
    11fe:	0f 2e       	mov	r0, r31
    1200:	f9 e4       	ldi	r31, 0x49	; 73
    1202:	ef 2e       	mov	r14, r31
    1204:	f0 2d       	mov	r31, r0
    1206:	33 c1       	rjmp	.+614    	; 0x146e <main+0x83e>
                    resVoltage = ((-100280 * resVoltage) / (resVoltage - 3.23)) - resOffset;
                    if (resVoltage > 2000000)
                        if (resVoltage > 970000) {
                            resVoltage = 1000000;
                        }
                    if (calc == 4) {
    1208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    120c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1210:	04 97       	sbiw	r24, 0x04	; 4
    1212:	81 f4       	brne	.+32     	; 0x1234 <main+0x604>
                        lcd_gotoxy(0, 2);
    1214:	62 e0       	ldi	r22, 0x02	; 2
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("           ");
    121c:	87 e5       	ldi	r24, 0x57	; 87
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_gotoxy(0, 2);
    1224:	62 e0       	ldi	r22, 0x02	; 2
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("OPEN");
    122c:	83 e6       	ldi	r24, 0x63	; 99
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                    }
                    if (log10(resVoltage) < 6 && log10(resVoltage) > 5) {
    1234:	10 91 98 01 	lds	r17, 0x0198	; 0x800198 <resVoltage>
    1238:	00 91 99 01 	lds	r16, 0x0199	; 0x800199 <resVoltage+0x1>
    123c:	f0 90 9a 01 	lds	r15, 0x019A	; 0x80019a <resVoltage+0x2>
    1240:	e0 90 9b 01 	lds	r14, 0x019B	; 0x80019b <resVoltage+0x3>
    1244:	61 2f       	mov	r22, r17
    1246:	70 2f       	mov	r23, r16
    1248:	8f 2d       	mov	r24, r15
    124a:	9e 2d       	mov	r25, r14
    124c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <log10>
    1250:	69 ab       	std	Y+49, r22	; 0x31
    1252:	7a ab       	std	Y+50, r23	; 0x32
    1254:	8b ab       	std	Y+51, r24	; 0x33
    1256:	9c ab       	std	Y+52, r25	; 0x34
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 ec       	ldi	r20, 0xC0	; 192
    125e:	50 e4       	ldi	r21, 0x40	; 64
    1260:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpsf2>
    1264:	88 23       	and	r24, r24
    1266:	0c f0       	brlt	.+2      	; 0x126a <main+0x63a>
    1268:	46 c0       	rjmp	.+140    	; 0x12f6 <main+0x6c6>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 ea       	ldi	r20, 0xA0	; 160
    1270:	50 e4       	ldi	r21, 0x40	; 64
    1272:	69 a9       	ldd	r22, Y+49	; 0x31
    1274:	7a a9       	ldd	r23, Y+50	; 0x32
    1276:	8b a9       	ldd	r24, Y+51	; 0x33
    1278:	9c a9       	ldd	r25, Y+52	; 0x34
    127a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    127e:	18 16       	cp	r1, r24
    1280:	d4 f5       	brge	.+116    	; 0x12f6 <main+0x6c6>
                        sprintf(voltageString, "%.3f", resVoltage);
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	7f 92       	push	r7
    128c:	6f 92       	push	r6
    128e:	bf 92       	push	r11
    1290:	af 92       	push	r10
    1292:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                        uart_transmit(voltageString[0]);
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[1]);
    129c:	8a a1       	ldd	r24, Y+34	; 0x22
    129e:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[2]);
    12a2:	8b a1       	ldd	r24, Y+35	; 0x23
    12a4:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit('k');
    12a8:	8b e6       	ldi	r24, 0x6B	; 107
    12aa:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        // lcd
                        lcd_gotoxy(0, 1);
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("          ");
    12b6:	88 e5       	ldi	r24, 0x58	; 88
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_gotoxy(0, 1);
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_putc(voltageString[0]);
    12c6:	89 a1       	ldd	r24, Y+33	; 0x21
    12c8:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[1]);
    12cc:	8a a1       	ldd	r24, Y+34	; 0x22
    12ce:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[2]);
    12d2:	8b a1       	ldd	r24, Y+35	; 0x23
    12d4:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc('k');
    12d8:	8b e6       	ldi	r24, 0x6B	; 107
    12da:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(244);
    12de:	84 ef       	ldi	r24, 0xF4	; 244
    12e0:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        uart_transmit('k');
    12e4:	8b e6       	ldi	r24, 0x6B	; 107
    12e6:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	ad c2       	rjmp	.+1370   	; 0x1850 <main+0xc20>
                    } else if (log10(resVoltage) < 4 && log10(resVoltage) > 3) {
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e8       	ldi	r20, 0x80	; 128
    12fc:	50 e4       	ldi	r21, 0x40	; 64
    12fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1300:	7a a9       	ldd	r23, Y+50	; 0x32
    1302:	8b a9       	ldd	r24, Y+51	; 0x33
    1304:	9c a9       	ldd	r25, Y+52	; 0x34
    1306:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpsf2>
    130a:	88 23       	and	r24, r24
    130c:	0c f0       	brlt	.+2      	; 0x1310 <main+0x6e0>
    130e:	4c c0       	rjmp	.+152    	; 0x13a8 <main+0x778>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e4       	ldi	r20, 0x40	; 64
    1316:	50 e4       	ldi	r21, 0x40	; 64
    1318:	69 a9       	ldd	r22, Y+49	; 0x31
    131a:	7a a9       	ldd	r23, Y+50	; 0x32
    131c:	8b a9       	ldd	r24, Y+51	; 0x33
    131e:	9c a9       	ldd	r25, Y+52	; 0x34
    1320:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    1324:	18 16       	cp	r1, r24
    1326:	0c f0       	brlt	.+2      	; 0x132a <main+0x6fa>
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <main+0x778>
                        sprintf(voltageString, "%.3g", resVoltage);
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	ed e6       	ldi	r30, 0x6D	; 109
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	ff 93       	push	r31
    1338:	ef 93       	push	r30
    133a:	bf 92       	push	r11
    133c:	af 92       	push	r10
    133e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                        uart_transmit(voltageString[0]);
    1342:	89 a1       	ldd	r24, Y+33	; 0x21
    1344:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[1]);
    1348:	8a a1       	ldd	r24, Y+34	; 0x22
    134a:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[2]);
    134e:	8b a1       	ldd	r24, Y+35	; 0x23
    1350:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[3]);
    1354:	8c a1       	ldd	r24, Y+36	; 0x24
    1356:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit('k');
    135a:	8b e6       	ldi	r24, 0x6B	; 107
    135c:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        // lcd
                        lcd_gotoxy(0, 1);
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("          ");
    1368:	88 e5       	ldi	r24, 0x58	; 88
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_gotoxy(0, 1);
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_putc(voltageString[0]);
    1378:	89 a1       	ldd	r24, Y+33	; 0x21
    137a:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[1]);
    137e:	8a a1       	ldd	r24, Y+34	; 0x22
    1380:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[2]);
    1384:	8b a1       	ldd	r24, Y+35	; 0x23
    1386:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[3]);
    138a:	8c a1       	ldd	r24, Y+36	; 0x24
    138c:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc('k');
    1390:	8b e6       	ldi	r24, 0x6B	; 107
    1392:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(244);
    1396:	84 ef       	ldi	r24, 0xF4	; 244
    1398:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	54 c2       	rjmp	.+1192   	; 0x1850 <main+0xc20>
                    } else if (log10(resVoltage) < 5 && log10(resVoltage) > 4) {
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 ea       	ldi	r20, 0xA0	; 160
    13ae:	50 e4       	ldi	r21, 0x40	; 64
    13b0:	69 a9       	ldd	r22, Y+49	; 0x31
    13b2:	7a a9       	ldd	r23, Y+50	; 0x32
    13b4:	8b a9       	ldd	r24, Y+51	; 0x33
    13b6:	9c a9       	ldd	r25, Y+52	; 0x34
    13b8:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpsf2>
    13bc:	88 23       	and	r24, r24
    13be:	0c f0       	brlt	.+2      	; 0x13c2 <main+0x792>
    13c0:	49 c0       	rjmp	.+146    	; 0x1454 <main+0x824>
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	50 e4       	ldi	r21, 0x40	; 64
    13ca:	69 a9       	ldd	r22, Y+49	; 0x31
    13cc:	7a a9       	ldd	r23, Y+50	; 0x32
    13ce:	8b a9       	ldd	r24, Y+51	; 0x33
    13d0:	9c a9       	ldd	r25, Y+52	; 0x34
    13d2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	ec f5       	brge	.+122    	; 0x1454 <main+0x824>
                        sprintf(voltageString, "%.3f", resVoltage);
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	7f 92       	push	r7
    13e4:	6f 92       	push	r6
    13e6:	bf 92       	push	r11
    13e8:	af 92       	push	r10
    13ea:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                        uart_transmit(voltageString[0]);
    13ee:	89 a1       	ldd	r24, Y+33	; 0x21
    13f0:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[1]);
    13f4:	8a a1       	ldd	r24, Y+34	; 0x22
    13f6:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit('.');
    13fa:	8e e2       	ldi	r24, 0x2E	; 46
    13fc:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[2]);
    1400:	8b a1       	ldd	r24, Y+35	; 0x23
    1402:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit('k');
    1406:	8b e6       	ldi	r24, 0x6B	; 107
    1408:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        // lcd
                        lcd_gotoxy(0, 1);
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("          ");
    1414:	88 e5       	ldi	r24, 0x58	; 88
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_gotoxy(0, 1);
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_putc(voltageString[0]);
    1424:	89 a1       	ldd	r24, Y+33	; 0x21
    1426:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[1]);
    142a:	8a a1       	ldd	r24, Y+34	; 0x22
    142c:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc('.');
    1430:	8e e2       	ldi	r24, 0x2E	; 46
    1432:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[2]);
    1436:	8b a1       	ldd	r24, Y+35	; 0x23
    1438:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc('k');
    143c:	8b e6       	ldi	r24, 0x6B	; 107
    143e:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(244);
    1442:	84 ef       	ldi	r24, 0xF4	; 244
    1444:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	fe c1       	rjmp	.+1020   	; 0x1850 <main+0xc20>
                    } else if (log10(resVoltage) >= 6) {
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 ec       	ldi	r20, 0xC0	; 192
    145a:	50 e4       	ldi	r21, 0x40	; 64
    145c:	69 a9       	ldd	r22, Y+49	; 0x31
    145e:	7a a9       	ldd	r23, Y+50	; 0x32
    1460:	8b a9       	ldd	r24, Y+51	; 0x33
    1462:	9c a9       	ldd	r25, Y+52	; 0x34
    1464:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    1468:	88 23       	and	r24, r24
    146a:	0c f4       	brge	.+2      	; 0x146e <main+0x83e>
    146c:	f1 c1       	rjmp	.+994    	; 0x1850 <main+0xc20>
                        sprintf(voltageString, "%.3f", resVoltage);
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	7f 92       	push	r7
    1478:	6f 92       	push	r6
    147a:	bf 92       	push	r11
    147c:	af 92       	push	r10
    147e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                        uart_transmit(voltageString[0]);
    1482:	89 a1       	ldd	r24, Y+33	; 0x21
    1484:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit('.');
    1488:	8e e2       	ldi	r24, 0x2E	; 46
    148a:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[1]);
    148e:	8a a1       	ldd	r24, Y+34	; 0x22
    1490:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit(voltageString[2]);
    1494:	8b a1       	ldd	r24, Y+35	; 0x23
    1496:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        uart_transmit('M');
    149a:	8d e4       	ldi	r24, 0x4D	; 77
    149c:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                        // lcd
                        lcd_gotoxy(0, 1);
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("          ");
    14a8:	88 e5       	ldi	r24, 0x58	; 88
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_gotoxy(0, 1);
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_putc(voltageString[0]);
    14b8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ba:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc('.');
    14be:	8e e2       	ldi	r24, 0x2E	; 46
    14c0:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[1]);
    14c4:	8a a1       	ldd	r24, Y+34	; 0x22
    14c6:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(voltageString[2]);
    14ca:	8b a1       	ldd	r24, Y+35	; 0x23
    14cc:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc('M');
    14d0:	8d e4       	ldi	r24, 0x4D	; 77
    14d2:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                        lcd_putc(244);
    14d6:	84 ef       	ldi	r24, 0xF4	; 244
    14d8:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	b4 c1       	rjmp	.+872    	; 0x1850 <main+0xc20>
    14e8:	05 e0       	ldi	r16, 0x05	; 5
    14ea:	10 e0       	ldi	r17, 0x00	; 0
                    }

                } else {
                    // 4k and under
                    for (int i = 0; i < 5; i++) {
                        dataBinary = ads1115_read_SE(ADS1115_ADDR, ads1115ConfigRes1k);
    14ec:	63 ee       	ldi	r22, 0xE3	; 227
    14ee:	7a ec       	ldi	r23, 0xCA	; 202
    14f0:	88 e4       	ldi	r24, 0x48	; 72
    14f2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ads1115_read_SE>
    14f6:	01 50       	subi	r16, 0x01	; 1
    14f8:	11 09       	sbc	r17, r1
                        lcd_putc(244);
                    }

                } else {
                    // 4k and under
                    for (int i = 0; i < 5; i++) {
    14fa:	c1 f7       	brne	.-16     	; 0x14ec <main+0x8bc>
                        dataBinary = ads1115_read_SE(ADS1115_ADDR, ads1115ConfigRes1k);
                    }
                    if (dataBinary < 81) {
    14fc:	81 35       	cpi	r24, 0x51	; 81
    14fe:	91 05       	cpc	r25, r1
    1500:	0c f0       	brlt	.+2      	; 0x1504 <main+0x8d4>
    1502:	c3 c0       	rjmp	.+390    	; 0x168a <main+0xa5a>
                        // 15 ohms and less - change refernece resistor by ddrd
                        // change pin modes
                        DDRD &= ~(1 << DDD3); // 100k resistor INPUT - high ZIN
    1504:	53 98       	cbi	0x0a, 3	; 10

                        DDRD |= (1 << PIND4); // 1k resistor OUTPUT
    1506:	54 9a       	sbi	0x0a, 4	; 10
                        PORTD |= (1 << PIND4); // 1k resistor HIGH
    1508:	5c 9a       	sbi	0x0b, 4	; 11
                        MCUCR |= (1 << PUD); // hopefully hi zin??
    150a:	85 b7       	in	r24, 0x35	; 53
    150c:	80 61       	ori	r24, 0x10	; 16
    150e:	85 bf       	out	0x35, r24	; 53
    1510:	05 e0       	ldi	r16, 0x05	; 5
    1512:	10 e0       	ldi	r17, 0x00	; 0
                        for (int i = 0; i < 5; i++) {
                            dataBinary = ads1115_read_SE(ADS1115_ADDR, ads1115ConfigRes1k);
    1514:	63 ee       	ldi	r22, 0xE3	; 227
    1516:	7a ec       	ldi	r23, 0xCA	; 202
    1518:	88 e4       	ldi	r24, 0x48	; 72
    151a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ads1115_read_SE>
    151e:	01 50       	subi	r16, 0x01	; 1
    1520:	11 09       	sbc	r17, r1
                        DDRD &= ~(1 << DDD3); // 100k resistor INPUT - high ZIN

                        DDRD |= (1 << PIND4); // 1k resistor OUTPUT
                        PORTD |= (1 << PIND4); // 1k resistor HIGH
                        MCUCR |= (1 << PUD); // hopefully hi zin??
                        for (int i = 0; i < 5; i++) {
    1522:	c1 f7       	brne	.-16     	; 0x1514 <main+0x8e4>
                            dataBinary = ads1115_read_SE(ADS1115_ADDR, ads1115ConfigRes1k);
                        }

                        resVoltage = (dataBinary - 63.17906) / 128272.823;
    1524:	bc 01       	movw	r22, r24
    1526:	99 0f       	add	r25, r25
    1528:	88 0b       	sbc	r24, r24
    152a:	99 0b       	sbc	r25, r25
    152c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    1530:	2c e5       	ldi	r18, 0x5C	; 92
    1532:	37 eb       	ldi	r19, 0xB7	; 183
    1534:	4c e7       	ldi	r20, 0x7C	; 124
    1536:	52 e4       	ldi	r21, 0x42	; 66
    1538:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    153c:	29 e6       	ldi	r18, 0x69	; 105
    153e:	38 e8       	ldi	r19, 0x88	; 136
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    1548:	69 ab       	std	Y+49, r22	; 0x31
    154a:	7a ab       	std	Y+50, r23	; 0x32
    154c:	8b ab       	std	Y+51, r24	; 0x33
    154e:	9c ab       	std	Y+52, r25	; 0x34
                        resVoltage = (-996 * resVoltage) / (resVoltage - 3.25) - resOffset;
    1550:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <resOffset>
    1554:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <resOffset+0x1>
    1558:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <resOffset+0x2>
    155c:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <resOffset+0x3>
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	49 e7       	ldi	r20, 0x79	; 121
    1566:	54 ec       	ldi	r21, 0xC4	; 196
    1568:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsf3>
    156c:	6d ab       	std	Y+53, r22	; 0x35
    156e:	7e ab       	std	Y+54, r23	; 0x36
    1570:	8f ab       	std	Y+55, r24	; 0x37
    1572:	98 af       	std	Y+56, r25	; 0x38
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e5       	ldi	r20, 0x50	; 80
    157a:	50 e4       	ldi	r21, 0x40	; 64
    157c:	69 a9       	ldd	r22, Y+49	; 0x31
    157e:	7a a9       	ldd	r23, Y+50	; 0x32
    1580:	8b a9       	ldd	r24, Y+51	; 0x33
    1582:	9c a9       	ldd	r25, Y+52	; 0x34
    1584:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	6d a9       	ldd	r22, Y+53	; 0x35
    158e:	7e a9       	ldd	r23, Y+54	; 0x36
    1590:	8f a9       	ldd	r24, Y+55	; 0x37
    1592:	98 ad       	ldd	r25, Y+56	; 0x38
    1594:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    1598:	a7 01       	movw	r20, r14
    159a:	96 01       	movw	r18, r12
    159c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    15a0:	16 2f       	mov	r17, r22
    15a2:	07 2f       	mov	r16, r23
    15a4:	f8 2e       	mov	r15, r24
    15a6:	e9 2e       	mov	r14, r25
    15a8:	86 2f       	mov	r24, r22
    15aa:	90 2f       	mov	r25, r16
    15ac:	af 2d       	mov	r26, r15
    15ae:	be 2d       	mov	r27, r14
    15b0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <resVoltage>
    15b4:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <resVoltage+0x1>
    15b8:	a0 93 9a 01 	sts	0x019A, r26	; 0x80019a <resVoltage+0x2>
    15bc:	b0 93 9b 01 	sts	0x019B, r27	; 0x80019b <resVoltage+0x3>

                        if (resVoltage < (double)contThresh / 10 && calc == 4) {
    15c0:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <contThresh>
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__floatunsisf>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e2       	ldi	r20, 0x20	; 32
    15d4:	51 e4       	ldi	r21, 0x41	; 65
    15d6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	61 2f       	mov	r22, r17
    15e0:	70 2f       	mov	r23, r16
    15e2:	8f 2d       	mov	r24, r15
    15e4:	9e 2d       	mov	r25, r14
    15e6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__cmpsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	c4 f4       	brge	.+48     	; 0x161e <main+0x9ee>
    15ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    15f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    15f6:	04 97       	sbiw	r24, 0x04	; 4
    15f8:	09 f0       	breq	.+2      	; 0x15fc <main+0x9cc>
    15fa:	11 c2       	rjmp	.+1058   	; 0x1a1e <main+0xdee>
                            lcd_gotoxy(0, 2);
    15fc:	62 e0       	ldi	r22, 0x02	; 2
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("           ");
    1604:	87 e5       	ldi	r24, 0x57	; 87
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                            lcd_gotoxy(0, 2);
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("SHORT");
    1614:	82 e7       	ldi	r24, 0x72	; 114
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
    161c:	12 c2       	rjmp	.+1060   	; 0x1a42 <main+0xe12>
                        } else if (calc == 4) {
    161e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1622:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1626:	04 97       	sbiw	r24, 0x04	; 4
    1628:	09 f0       	breq	.+2      	; 0x162c <main+0x9fc>
    162a:	0b c2       	rjmp	.+1046   	; 0x1a42 <main+0xe12>
                            lcd_gotoxy(0, 2);
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("           ");
    1634:	87 e5       	ldi	r24, 0x57	; 87
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>

                            lcd_gotoxy(0, 2);
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("OPEN");
    1644:	83 e6       	ldi	r24, 0x63	; 99
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
    164c:	fa c1       	rjmp	.+1012   	; 0x1a42 <main+0xe12>
    164e:	8e 01       	movw	r16, r28
    1650:	0f 5d       	subi	r16, 0xDF	; 223
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
                        }
                        sprintf(voltageString, "%.3g", resVoltage);
                        for (int i = 0; i < sizeof(voltageString); i++) {
                            uart_transmit(voltageString[i]);
    1654:	d8 01       	movw	r26, r16
    1656:	8d 91       	ld	r24, X+
    1658:	8d 01       	movw	r16, r26
    165a:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>

                            lcd_gotoxy(0, 2);
                            lcd_puts("OPEN");
                        }
                        sprintf(voltageString, "%.3g", resVoltage);
                        for (int i = 0; i < sizeof(voltageString); i++) {
    165e:	02 15       	cp	r16, r2
    1660:	13 05       	cpc	r17, r3
    1662:	c1 f7       	brne	.-16     	; 0x1654 <main+0xa24>
                            uart_transmit(voltageString[i]);
                        }
                        lcd_gotoxy(0, 1);
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts("          ");
    166c:	88 e5       	ldi	r24, 0x58	; 88
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_gotoxy(0, 1);
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                        lcd_puts(voltageString);
    167c:	c5 01       	movw	r24, r10
    167e:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        lcd_putc(244);
    1682:	84 ef       	ldi	r24, 0xF4	; 244
    1684:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    1688:	e3 c0       	rjmp	.+454    	; 0x1850 <main+0xc20>

                    } else {
                        // above 15 ohms
                        resVoltage = (dataBinary + 2.85064) / 128227.4618;
    168a:	bc 01       	movw	r22, r24
    168c:	99 0f       	add	r25, r25
    168e:	88 0b       	sbc	r24, r24
    1690:	99 0b       	sbc	r25, r25
    1692:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    1696:	23 ee       	ldi	r18, 0xE3	; 227
    1698:	30 e7       	ldi	r19, 0x70	; 112
    169a:	46 e3       	ldi	r20, 0x36	; 54
    169c:	50 e4       	ldi	r21, 0x40	; 64
    169e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
    16a2:	2b eb       	ldi	r18, 0xBB	; 187
    16a4:	31 e7       	ldi	r19, 0x71	; 113
    16a6:	4a ef       	ldi	r20, 0xFA	; 250
    16a8:	57 e4       	ldi	r21, 0x47	; 71
    16aa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    16ae:	69 ab       	std	Y+49, r22	; 0x31
    16b0:	7a ab       	std	Y+50, r23	; 0x32
    16b2:	8b ab       	std	Y+51, r24	; 0x33
    16b4:	9c ab       	std	Y+52, r25	; 0x34
                        resVoltage = ((-100280 * resVoltage) / (resVoltage - 3.25)) - resOffset;
    16b6:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <resOffset>
    16ba:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <resOffset+0x1>
    16be:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <resOffset+0x2>
    16c2:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <resOffset+0x3>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3c ed       	ldi	r19, 0xDC	; 220
    16ca:	43 ec       	ldi	r20, 0xC3	; 195
    16cc:	57 ec       	ldi	r21, 0xC7	; 199
    16ce:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__mulsf3>
    16d2:	6d ab       	std	Y+53, r22	; 0x35
    16d4:	7e ab       	std	Y+54, r23	; 0x36
    16d6:	8f ab       	std	Y+55, r24	; 0x37
    16d8:	98 af       	std	Y+56, r25	; 0x38
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e5       	ldi	r20, 0x50	; 80
    16e0:	50 e4       	ldi	r21, 0x40	; 64
    16e2:	69 a9       	ldd	r22, Y+49	; 0x31
    16e4:	7a a9       	ldd	r23, Y+50	; 0x32
    16e6:	8b a9       	ldd	r24, Y+51	; 0x33
    16e8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ea:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	6d a9       	ldd	r22, Y+53	; 0x35
    16f4:	7e a9       	ldd	r23, Y+54	; 0x36
    16f6:	8f a9       	ldd	r24, Y+55	; 0x37
    16f8:	98 ad       	ldd	r25, Y+56	; 0x38
    16fa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    16fe:	a7 01       	movw	r20, r14
    1700:	96 01       	movw	r18, r12
    1702:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__subsf3>
    1706:	16 2f       	mov	r17, r22
    1708:	07 2f       	mov	r16, r23
    170a:	f8 2e       	mov	r15, r24
    170c:	e9 2e       	mov	r14, r25
    170e:	86 2f       	mov	r24, r22
    1710:	90 2f       	mov	r25, r16
    1712:	af 2d       	mov	r26, r15
    1714:	be 2d       	mov	r27, r14
    1716:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <resVoltage>
    171a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <resVoltage+0x1>
    171e:	a0 93 9a 01 	sts	0x019A, r26	; 0x80019a <resVoltage+0x2>
    1722:	b0 93 9b 01 	sts	0x019B, r27	; 0x80019b <resVoltage+0x3>
                        if (log10(resVoltage) >= 3) {
    1726:	61 2f       	mov	r22, r17
    1728:	70 2f       	mov	r23, r16
    172a:	8f 2d       	mov	r24, r15
    172c:	9e 2d       	mov	r25, r14
    172e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <log10>
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e4       	ldi	r20, 0x40	; 64
    1738:	50 e4       	ldi	r21, 0x40	; 64
    173a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__gesf2>
    173e:	88 23       	and	r24, r24
    1740:	0c f4       	brge	.+2      	; 0x1744 <main+0xb14>
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <main+0xb92>
                            sprintf(voltageString, "%.3g", resVoltage);
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	ed e6       	ldi	r30, 0x6D	; 109
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	ff 93       	push	r31
    1752:	ef 93       	push	r30
    1754:	bf 92       	push	r11
    1756:	af 92       	push	r10
    1758:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                            uart_transmit(voltageString[0]);
    175c:	89 a1       	ldd	r24, Y+33	; 0x21
    175e:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            uart_transmit(voltageString[1]);
    1762:	8a a1       	ldd	r24, Y+34	; 0x22
    1764:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            uart_transmit(voltageString[2]);
    1768:	8b a1       	ldd	r24, Y+35	; 0x23
    176a:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            uart_transmit(voltageString[3]);
    176e:	8c a1       	ldd	r24, Y+36	; 0x24
    1770:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            uart_transmit('k');
    1774:	8b e6       	ldi	r24, 0x6B	; 107
    1776:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            // lcd
                            lcd_gotoxy(0, 1);
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("          ");
    1782:	88 e5       	ldi	r24, 0x58	; 88
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                            lcd_gotoxy(0, 1);
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_putc(voltageString[0]);
    1792:	89 a1       	ldd	r24, Y+33	; 0x21
    1794:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(voltageString[1]);
    1798:	8a a1       	ldd	r24, Y+34	; 0x22
    179a:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(voltageString[2]);
    179e:	8b a1       	ldd	r24, Y+35	; 0x23
    17a0:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(voltageString[3]);
    17a4:	8c a1       	ldd	r24, Y+36	; 0x24
    17a6:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc('k');
    17aa:	8b e6       	ldi	r24, 0x6B	; 107
    17ac:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(244);
    17b0:	84 ef       	ldi	r24, 0xF4	; 244
    17b2:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	30 c0       	rjmp	.+96     	; 0x1822 <main+0xbf2>

                        } else {
                            sprintf(voltageString, "%.3f", resVoltage);
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	7f 92       	push	r7
    17cc:	6f 92       	push	r6
    17ce:	bf 92       	push	r11
    17d0:	af 92       	push	r10
    17d2:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                            uart_transmit(voltageString[0]);
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            uart_transmit(voltageString[1]);
    17dc:	8a a1       	ldd	r24, Y+34	; 0x22
    17de:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            uart_transmit(voltageString[2]);
    17e2:	8b a1       	ldd	r24, Y+35	; 0x23
    17e4:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                            // lcd
                            lcd_gotoxy(0, 1);
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("          ");
    17f0:	88 e5       	ldi	r24, 0x58	; 88
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                            lcd_gotoxy(0, 1);
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_putc(voltageString[0]);
    1800:	89 a1       	ldd	r24, Y+33	; 0x21
    1802:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(voltageString[1]);
    1806:	8a a1       	ldd	r24, Y+34	; 0x22
    1808:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(voltageString[2]);
    180c:	8b a1       	ldd	r24, Y+35	; 0x23
    180e:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
                            lcd_putc(244);
    1812:	84 ef       	ldi	r24, 0xF4	; 244
    1814:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
                        }
                        if (calc == 4) {
    1822:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1826:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    182a:	04 97       	sbiw	r24, 0x04	; 4
    182c:	09 f0       	breq	.+2      	; 0x1830 <main+0xc00>
    182e:	49 c0       	rjmp	.+146    	; 0x18c2 <main+0xc92>
                            lcd_gotoxy(0, 2);
    1830:	62 e0       	ldi	r22, 0x02	; 2
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("               ");
    1838:	83 e5       	ldi	r24, 0x53	; 83
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                            lcd_gotoxy(0, 2);
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                            lcd_puts("OPEN");
    1848:	83 e6       	ldi	r24, 0x63	; 99
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                        }
                    }
                }
                if (calc == 4) {
    1850:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1854:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1858:	04 97       	sbiw	r24, 0x04	; 4
    185a:	99 f5       	brne	.+102    	; 0x18c2 <main+0xc92>
                    sprintf(thresh, "%.1f", (double)(eeprom_read_byte((const uint8_t*)20)) / 10);
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <eeprom_read_byte>
    1864:	68 2f       	mov	r22, r24
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__floatunsisf>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divsf3>
    187c:	9f 93       	push	r25
    187e:	8f 93       	push	r24
    1880:	7f 93       	push	r23
    1882:	6f 93       	push	r22
    1884:	e8 e7       	ldi	r30, 0x78	; 120
    1886:	f1 e0       	ldi	r31, 0x01	; 1
    1888:	ff 93       	push	r31
    188a:	ef 93       	push	r30
    188c:	3f 92       	push	r3
    188e:	2f 92       	push	r2
    1890:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                    lcd_gotoxy(8, 2);
    1894:	62 e0       	ldi	r22, 0x02	; 2
    1896:	88 e0       	ldi	r24, 0x08	; 8
    1898:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                    lcd_puts("        ");
    189c:	8a e5       	ldi	r24, 0x5A	; 90
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                    lcd_gotoxy(8, 2);
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	88 e0       	ldi	r24, 0x08	; 8
    18a8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_gotoxy>
                    lcd_puts(thresh);
    18ac:	c1 01       	movw	r24, r2
    18ae:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_puts>
                    lcd_putc(244);
    18b2:	84 ef       	ldi	r24, 0xF4	; 244
    18b4:	0e 94 94 01 	call	0x328	; 0x328 <lcd_putc>
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
                }
                // transmit rest of packet
                uart_transmit(':');
    18c2:	8a e3       	ldi	r24, 0x3A	; 58
    18c4:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(current_level + '0');
    18c8:	a4 e0       	ldi	r26, 0x04	; 4
    18ca:	b1 e0       	ldi	r27, 0x01	; 1
    18cc:	8c 91       	ld	r24, X
    18ce:	80 5d       	subi	r24, 0xD0	; 208
    18d0:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>

                memset(voltageString, 0, sizeof(voltageString));
    18d4:	f5 01       	movw	r30, r10
    18d6:	28 e0       	ldi	r18, 0x08	; 8
    18d8:	11 92       	st	Z+, r1
    18da:	2a 95       	dec	r18
    18dc:	e9 f7       	brne	.-6      	; 0x18d8 <main+0xca8>
                memset(thresh, 0, sizeof(thresh));
    18de:	d1 01       	movw	r26, r2
    18e0:	e8 e0       	ldi	r30, 0x08	; 8
    18e2:	1d 92       	st	X+, r1
    18e4:	ea 95       	dec	r30
    18e6:	e9 f7       	brne	.-6      	; 0x18e2 <main+0xcb2>
                uart_newline();
    18e8:	0e 94 94 04 	call	0x928	; 0x928 <uart_newline>
    18ec:	8f e4       	ldi	r24, 0x4F	; 79
    18ee:	93 ec       	ldi	r25, 0xC3	; 195
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <main+0xcc0>
    18f4:	00 c0       	rjmp	.+0      	; 0x18f6 <main+0xcc6>
    18f6:	00 00       	nop
    18f8:	fb c9       	rjmp	.-3082   	; 0xcf0 <main+0xc0>
                }
                if (dataVoltage < voltMinDC) {
                    voltMinDC = dataVoltage;
                }

                sprintf(voltageString, "%.3f", dataVoltage);
    18fa:	ff 92       	push	r15
    18fc:	ef 92       	push	r14
    18fe:	df 92       	push	r13
    1900:	cf 92       	push	r12
    1902:	7f 92       	push	r7
    1904:	6f 92       	push	r6
    1906:	bf 92       	push	r11
    1908:	af 92       	push	r10
    190a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                sprintf(buff2, "%.3f", voltMinDC);
    190e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <voltMinDC>
    1912:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <voltMinDC+0x1>
    1916:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <voltMinDC+0x2>
    191a:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <voltMinDC+0x3>
    191e:	bf 93       	push	r27
    1920:	af 93       	push	r26
    1922:	9f 93       	push	r25
    1924:	8f 93       	push	r24
    1926:	7f 92       	push	r7
    1928:	6f 92       	push	r6
    192a:	9f 92       	push	r9
    192c:	8f 92       	push	r8
    192e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                sprintf(buff, "%.3f", voltMaxDC);
    1932:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <voltMaxDC>
    1936:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <voltMaxDC+0x1>
    193a:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <voltMaxDC+0x2>
    193e:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <voltMaxDC+0x3>
    1942:	bf 93       	push	r27
    1944:	af 93       	push	r26
    1946:	9f 93       	push	r25
    1948:	8f 93       	push	r24
    194a:	7f 92       	push	r7
    194c:	6f 92       	push	r6
    194e:	5f 92       	push	r5
    1950:	4f 92       	push	r4
    1952:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                uart_transmit('D');
    1956:	84 e4       	ldi	r24, 0x44	; 68
    1958:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(':');
    195c:	8a e3       	ldi	r24, 0x3A	; 58
    195e:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    1962:	85 01       	movw	r16, r10
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	4b ca       	rjmp	.-2922   	; 0xe06 <main+0x1d6>
                for (int i = 0; i < sizeof(voltageString); i++) {
                    uart_transmit(voltageString[i]);
                }
                uart_transmit(':');
    1970:	8a e3       	ldi	r24, 0x3A	; 58
    1972:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    1976:	8e 01       	movw	r16, r28
    1978:	0f 5e       	subi	r16, 0xEF	; 239
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	4d ca       	rjmp	.-2918   	; 0xe18 <main+0x1e8>
                for (int i = 0; i < sizeof(buff2); i++) {
                    uart_transmit(buff2[i]);
                }
                uart_transmit(':');
    197e:	8a e3       	ldi	r24, 0x3A	; 58
    1980:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    1984:	8e 01       	movw	r16, r28
    1986:	0f 5f       	subi	r16, 0xFF	; 255
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	4f ca       	rjmp	.-2914   	; 0xe2a <main+0x1fa>
                }
                if (final < voltMinAC) {
                    voltMinAC = final;
                }
                // transmit voltage string
                sprintf(voltageString, "%.3f", final);
    198c:	ff 92       	push	r15
    198e:	ef 92       	push	r14
    1990:	df 92       	push	r13
    1992:	cf 92       	push	r12
    1994:	7f 92       	push	r7
    1996:	6f 92       	push	r6
    1998:	bf 92       	push	r11
    199a:	af 92       	push	r10
    199c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                sprintf(buff, "%.3f", voltMaxAC);
    19a0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <voltMaxAC>
    19a4:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <voltMaxAC+0x1>
    19a8:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <voltMaxAC+0x2>
    19ac:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <voltMaxAC+0x3>
    19b0:	bf 93       	push	r27
    19b2:	af 93       	push	r26
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	7f 92       	push	r7
    19ba:	6f 92       	push	r6
    19bc:	5f 92       	push	r5
    19be:	4f 92       	push	r4
    19c0:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                sprintf(buff2, "%.3f", voltMinAC);
    19c4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <voltMinAC>
    19c8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <voltMinAC+0x1>
    19cc:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <voltMinAC+0x2>
    19d0:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <voltMinAC+0x3>
    19d4:	bf 93       	push	r27
    19d6:	af 93       	push	r26
    19d8:	9f 93       	push	r25
    19da:	8f 93       	push	r24
    19dc:	7f 92       	push	r7
    19de:	6f 92       	push	r6
    19e0:	9f 92       	push	r9
    19e2:	8f 92       	push	r8
    19e4:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
                // transmit packet
                uart_transmit('A');
    19e8:	81 e4       	ldi	r24, 0x41	; 65
    19ea:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
                uart_transmit(':');
    19ee:	8a e3       	ldi	r24, 0x3A	; 58
    19f0:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    19f4:	85 01       	movw	r16, r10
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	e6 ca       	rjmp	.-2612   	; 0xfce <main+0x39e>
                for (int i = 0; i < sizeof(voltageString); i++) {
                    uart_transmit(voltageString[i]);
                }
                uart_transmit(':');
    1a02:	8a e3       	ldi	r24, 0x3A	; 58
    1a04:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    1a08:	8e 01       	movw	r16, r28
    1a0a:	0f 5e       	subi	r16, 0xEF	; 239
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	e8 ca       	rjmp	.-2608   	; 0xfe0 <main+0x3b0>
                for (int i = 0; i < sizeof(buff2); i++) {
                    uart_transmit(buff2[i]);
                }
                uart_transmit(':');
    1a10:	8a e3       	ldi	r24, 0x3A	; 58
    1a12:	0e 94 8c 04 	call	0x918	; 0x918 <uart_transmit>
    1a16:	8e 01       	movw	r16, r28
    1a18:	0f 5f       	subi	r16, 0xFF	; 255
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	ea ca       	rjmp	.-2604   	; 0xff2 <main+0x3c2>
                            lcd_puts("           ");

                            lcd_gotoxy(0, 2);
                            lcd_puts("OPEN");
                        }
                        sprintf(voltageString, "%.3g", resVoltage);
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	8d e6       	ldi	r24, 0x6D	; 109
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	bf 92       	push	r11
    1a30:	af 92       	push	r10
    1a32:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	06 ce       	rjmp	.-1012   	; 0x164e <main+0xa1e>
    1a42:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <resVoltage+0x3>
    1a46:	8f 93       	push	r24
    1a48:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <resVoltage+0x2>
    1a4c:	8f 93       	push	r24
    1a4e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <resVoltage+0x1>
    1a52:	8f 93       	push	r24
    1a54:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <resVoltage>
    1a58:	8f 93       	push	r24
    1a5a:	8d e6       	ldi	r24, 0x6D	; 109
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9f 93       	push	r25
    1a60:	8f 93       	push	r24
    1a62:	bf 92       	push	r11
    1a64:	af 92       	push	r10
    1a66:	0e 94 5e 15 	call	0x2abc	; 0x2abc <sprintf>
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	ec cd       	rjmp	.-1064   	; 0x164e <main+0xa1e>

00001a76 <__vector_1>:
    EICRA = (0 << ISC00) | (1 << ISC01);
    EIMSK = (1 << INT0);
}

ISR(INT0_vect)
{
    1a76:	1f 92       	push	r1
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	0f 92       	push	r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	2f 93       	push	r18
    1a82:	3f 93       	push	r19
    1a84:	8f 93       	push	r24
    1a86:	9f 93       	push	r25
    1a88:	af 93       	push	r26
    1a8a:	bf 93       	push	r27
    if (calc == 1 || calc == 2) {
    1a8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a90:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1a94:	9c 01       	movw	r18, r24
    1a96:	21 50       	subi	r18, 0x01	; 1
    1a98:	31 09       	sbc	r19, r1
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	88 f5       	brcc	.+98     	; 0x1b02 <__vector_1+0x8c>
        voltMaxAC = final;
    1aa0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <final>
    1aa4:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <final+0x1>
    1aa8:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <final+0x2>
    1aac:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <final+0x3>
    1ab0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <voltMaxAC>
    1ab4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <voltMaxAC+0x1>
    1ab8:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <voltMaxAC+0x2>
    1abc:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <voltMaxAC+0x3>
        voltMinAC = final;
    1ac0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <voltMinAC>
    1ac4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <voltMinAC+0x1>
    1ac8:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <voltMinAC+0x2>
    1acc:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <voltMinAC+0x3>
        voltMaxDC = dataVoltage;
    1ad0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <dataVoltage>
    1ad4:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <dataVoltage+0x1>
    1ad8:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <dataVoltage+0x2>
    1adc:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <dataVoltage+0x3>
    1ae0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <voltMaxDC>
    1ae4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <voltMaxDC+0x1>
    1ae8:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <voltMaxDC+0x2>
    1aec:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <voltMaxDC+0x3>
        voltMinDC = dataVoltage;
    1af0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <voltMinDC>
    1af4:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <voltMinDC+0x1>
    1af8:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <voltMinDC+0x2>
    1afc:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <voltMinDC+0x3>
    1b00:	12 c0       	rjmp	.+36     	; 0x1b26 <__vector_1+0xb0>
    } else if (calc == 3) {
    1b02:	03 97       	sbiw	r24, 0x03	; 3
    1b04:	81 f4       	brne	.+32     	; 0x1b26 <__vector_1+0xb0>
        resOffset = resVoltage;
    1b06:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <resVoltage>
    1b0a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <resVoltage+0x1>
    1b0e:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <resVoltage+0x2>
    1b12:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <resVoltage+0x3>
    1b16:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <resOffset>
    1b1a:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <resOffset+0x1>
    1b1e:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <resOffset+0x2>
    1b22:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <resOffset+0x3>
    }
}
    1b26:	bf 91       	pop	r27
    1b28:	af 91       	pop	r26
    1b2a:	9f 91       	pop	r25
    1b2c:	8f 91       	pop	r24
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti

00001b3c <__subsf3>:
    1b3c:	50 58       	subi	r21, 0x80	; 128

00001b3e <__addsf3>:
    1b3e:	bb 27       	eor	r27, r27
    1b40:	aa 27       	eor	r26, r26
    1b42:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3x>
    1b46:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_round>
    1b4a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_pscA>
    1b4e:	38 f0       	brcs	.+14     	; 0x1b5e <__addsf3+0x20>
    1b50:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__fp_pscB>
    1b54:	20 f0       	brcs	.+8      	; 0x1b5e <__addsf3+0x20>
    1b56:	39 f4       	brne	.+14     	; 0x1b66 <__addsf3+0x28>
    1b58:	9f 3f       	cpi	r25, 0xFF	; 255
    1b5a:	19 f4       	brne	.+6      	; 0x1b62 <__addsf3+0x24>
    1b5c:	26 f4       	brtc	.+8      	; 0x1b66 <__addsf3+0x28>
    1b5e:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_nan>
    1b62:	0e f4       	brtc	.+2      	; 0x1b66 <__addsf3+0x28>
    1b64:	e0 95       	com	r30
    1b66:	e7 fb       	bst	r30, 7
    1b68:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_inf>

00001b6c <__addsf3x>:
    1b6c:	e9 2f       	mov	r30, r25
    1b6e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__fp_split3>
    1b72:	58 f3       	brcs	.-42     	; 0x1b4a <__addsf3+0xc>
    1b74:	ba 17       	cp	r27, r26
    1b76:	62 07       	cpc	r22, r18
    1b78:	73 07       	cpc	r23, r19
    1b7a:	84 07       	cpc	r24, r20
    1b7c:	95 07       	cpc	r25, r21
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <__addsf3x+0x1c>
    1b80:	79 f4       	brne	.+30     	; 0x1ba0 <__addsf3x+0x34>
    1b82:	a6 f5       	brtc	.+104    	; 0x1bec <__addsf3x+0x80>
    1b84:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__fp_zero>
    1b88:	0e f4       	brtc	.+2      	; 0x1b8c <__addsf3x+0x20>
    1b8a:	e0 95       	com	r30
    1b8c:	0b 2e       	mov	r0, r27
    1b8e:	ba 2f       	mov	r27, r26
    1b90:	a0 2d       	mov	r26, r0
    1b92:	0b 01       	movw	r0, r22
    1b94:	b9 01       	movw	r22, r18
    1b96:	90 01       	movw	r18, r0
    1b98:	0c 01       	movw	r0, r24
    1b9a:	ca 01       	movw	r24, r20
    1b9c:	a0 01       	movw	r20, r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	ff 27       	eor	r31, r31
    1ba2:	59 1b       	sub	r21, r25
    1ba4:	99 f0       	breq	.+38     	; 0x1bcc <__addsf3x+0x60>
    1ba6:	59 3f       	cpi	r21, 0xF9	; 249
    1ba8:	50 f4       	brcc	.+20     	; 0x1bbe <__addsf3x+0x52>
    1baa:	50 3e       	cpi	r21, 0xE0	; 224
    1bac:	68 f1       	brcs	.+90     	; 0x1c08 <__addsf3x+0x9c>
    1bae:	1a 16       	cp	r1, r26
    1bb0:	f0 40       	sbci	r31, 0x00	; 0
    1bb2:	a2 2f       	mov	r26, r18
    1bb4:	23 2f       	mov	r18, r19
    1bb6:	34 2f       	mov	r19, r20
    1bb8:	44 27       	eor	r20, r20
    1bba:	58 5f       	subi	r21, 0xF8	; 248
    1bbc:	f3 cf       	rjmp	.-26     	; 0x1ba4 <__addsf3x+0x38>
    1bbe:	46 95       	lsr	r20
    1bc0:	37 95       	ror	r19
    1bc2:	27 95       	ror	r18
    1bc4:	a7 95       	ror	r26
    1bc6:	f0 40       	sbci	r31, 0x00	; 0
    1bc8:	53 95       	inc	r21
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <__addsf3x+0x52>
    1bcc:	7e f4       	brtc	.+30     	; 0x1bec <__addsf3x+0x80>
    1bce:	1f 16       	cp	r1, r31
    1bd0:	ba 0b       	sbc	r27, r26
    1bd2:	62 0b       	sbc	r22, r18
    1bd4:	73 0b       	sbc	r23, r19
    1bd6:	84 0b       	sbc	r24, r20
    1bd8:	ba f0       	brmi	.+46     	; 0x1c08 <__addsf3x+0x9c>
    1bda:	91 50       	subi	r25, 0x01	; 1
    1bdc:	a1 f0       	breq	.+40     	; 0x1c06 <__addsf3x+0x9a>
    1bde:	ff 0f       	add	r31, r31
    1be0:	bb 1f       	adc	r27, r27
    1be2:	66 1f       	adc	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	c2 f7       	brpl	.-16     	; 0x1bda <__addsf3x+0x6e>
    1bea:	0e c0       	rjmp	.+28     	; 0x1c08 <__addsf3x+0x9c>
    1bec:	ba 0f       	add	r27, r26
    1bee:	62 1f       	adc	r22, r18
    1bf0:	73 1f       	adc	r23, r19
    1bf2:	84 1f       	adc	r24, r20
    1bf4:	48 f4       	brcc	.+18     	; 0x1c08 <__addsf3x+0x9c>
    1bf6:	87 95       	ror	r24
    1bf8:	77 95       	ror	r23
    1bfa:	67 95       	ror	r22
    1bfc:	b7 95       	ror	r27
    1bfe:	f7 95       	ror	r31
    1c00:	9e 3f       	cpi	r25, 0xFE	; 254
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <__addsf3x+0x9a>
    1c04:	b0 cf       	rjmp	.-160    	; 0x1b66 <__addsf3+0x28>
    1c06:	93 95       	inc	r25
    1c08:	88 0f       	add	r24, r24
    1c0a:	08 f0       	brcs	.+2      	; 0x1c0e <__addsf3x+0xa2>
    1c0c:	99 27       	eor	r25, r25
    1c0e:	ee 0f       	add	r30, r30
    1c10:	97 95       	ror	r25
    1c12:	87 95       	ror	r24
    1c14:	08 95       	ret

00001c16 <__cmpsf2>:
    1c16:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_cmp>
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <__cmpsf2+0x8>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	08 95       	ret

00001c20 <__divsf3>:
    1c20:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__divsf3x>
    1c24:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_round>
    1c28:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__fp_pscB>
    1c2c:	58 f0       	brcs	.+22     	; 0x1c44 <__divsf3+0x24>
    1c2e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_pscA>
    1c32:	40 f0       	brcs	.+16     	; 0x1c44 <__divsf3+0x24>
    1c34:	29 f4       	brne	.+10     	; 0x1c40 <__divsf3+0x20>
    1c36:	5f 3f       	cpi	r21, 0xFF	; 255
    1c38:	29 f0       	breq	.+10     	; 0x1c44 <__divsf3+0x24>
    1c3a:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_inf>
    1c3e:	51 11       	cpse	r21, r1
    1c40:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_szero>
    1c44:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_nan>

00001c48 <__divsf3x>:
    1c48:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__fp_split3>
    1c4c:	68 f3       	brcs	.-38     	; 0x1c28 <__divsf3+0x8>

00001c4e <__divsf3_pse>:
    1c4e:	99 23       	and	r25, r25
    1c50:	b1 f3       	breq	.-20     	; 0x1c3e <__divsf3+0x1e>
    1c52:	55 23       	and	r21, r21
    1c54:	91 f3       	breq	.-28     	; 0x1c3a <__divsf3+0x1a>
    1c56:	95 1b       	sub	r25, r21
    1c58:	55 0b       	sbc	r21, r21
    1c5a:	bb 27       	eor	r27, r27
    1c5c:	aa 27       	eor	r26, r26
    1c5e:	62 17       	cp	r22, r18
    1c60:	73 07       	cpc	r23, r19
    1c62:	84 07       	cpc	r24, r20
    1c64:	38 f0       	brcs	.+14     	; 0x1c74 <__divsf3_pse+0x26>
    1c66:	9f 5f       	subi	r25, 0xFF	; 255
    1c68:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	44 1f       	adc	r20, r20
    1c70:	aa 1f       	adc	r26, r26
    1c72:	a9 f3       	breq	.-22     	; 0x1c5e <__divsf3_pse+0x10>
    1c74:	35 d0       	rcall	.+106    	; 0x1ce0 <__divsf3_pse+0x92>
    1c76:	0e 2e       	mov	r0, r30
    1c78:	3a f0       	brmi	.+14     	; 0x1c88 <__divsf3_pse+0x3a>
    1c7a:	e0 e8       	ldi	r30, 0x80	; 128
    1c7c:	32 d0       	rcall	.+100    	; 0x1ce2 <__divsf3_pse+0x94>
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	50 40       	sbci	r21, 0x00	; 0
    1c82:	e6 95       	lsr	r30
    1c84:	00 1c       	adc	r0, r0
    1c86:	ca f7       	brpl	.-14     	; 0x1c7a <__divsf3_pse+0x2c>
    1c88:	2b d0       	rcall	.+86     	; 0x1ce0 <__divsf3_pse+0x92>
    1c8a:	fe 2f       	mov	r31, r30
    1c8c:	29 d0       	rcall	.+82     	; 0x1ce0 <__divsf3_pse+0x92>
    1c8e:	66 0f       	add	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	bb 1f       	adc	r27, r27
    1c96:	26 17       	cp	r18, r22
    1c98:	37 07       	cpc	r19, r23
    1c9a:	48 07       	cpc	r20, r24
    1c9c:	ab 07       	cpc	r26, r27
    1c9e:	b0 e8       	ldi	r27, 0x80	; 128
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <__divsf3_pse+0x56>
    1ca2:	bb 0b       	sbc	r27, r27
    1ca4:	80 2d       	mov	r24, r0
    1ca6:	bf 01       	movw	r22, r30
    1ca8:	ff 27       	eor	r31, r31
    1caa:	93 58       	subi	r25, 0x83	; 131
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	3a f0       	brmi	.+14     	; 0x1cbe <__divsf3_pse+0x70>
    1cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	78 f0       	brcs	.+30     	; 0x1cd4 <__divsf3_pse+0x86>
    1cb6:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_inf>
    1cba:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_szero>
    1cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc0:	e4 f3       	brlt	.-8      	; 0x1cba <__divsf3_pse+0x6c>
    1cc2:	98 3e       	cpi	r25, 0xE8	; 232
    1cc4:	d4 f3       	brlt	.-12     	; 0x1cba <__divsf3_pse+0x6c>
    1cc6:	86 95       	lsr	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b7 95       	ror	r27
    1cce:	f7 95       	ror	r31
    1cd0:	9f 5f       	subi	r25, 0xFF	; 255
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <__divsf3_pse+0x78>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	91 1d       	adc	r25, r1
    1cd8:	96 95       	lsr	r25
    1cda:	87 95       	ror	r24
    1cdc:	97 f9       	bld	r25, 7
    1cde:	08 95       	ret
    1ce0:	e1 e0       	ldi	r30, 0x01	; 1
    1ce2:	66 0f       	add	r22, r22
    1ce4:	77 1f       	adc	r23, r23
    1ce6:	88 1f       	adc	r24, r24
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	62 17       	cp	r22, r18
    1cec:	73 07       	cpc	r23, r19
    1cee:	84 07       	cpc	r24, r20
    1cf0:	ba 07       	cpc	r27, r26
    1cf2:	20 f0       	brcs	.+8      	; 0x1cfc <__divsf3_pse+0xae>
    1cf4:	62 1b       	sub	r22, r18
    1cf6:	73 0b       	sbc	r23, r19
    1cf8:	84 0b       	sbc	r24, r20
    1cfa:	ba 0b       	sbc	r27, r26
    1cfc:	ee 1f       	adc	r30, r30
    1cfe:	88 f7       	brcc	.-30     	; 0x1ce2 <__divsf3_pse+0x94>
    1d00:	e0 95       	com	r30
    1d02:	08 95       	ret

00001d04 <__floatunsisf>:
    1d04:	e8 94       	clt
    1d06:	09 c0       	rjmp	.+18     	; 0x1d1a <__floatsisf+0x12>

00001d08 <__floatsisf>:
    1d08:	97 fb       	bst	r25, 7
    1d0a:	3e f4       	brtc	.+14     	; 0x1d1a <__floatsisf+0x12>
    1d0c:	90 95       	com	r25
    1d0e:	80 95       	com	r24
    1d10:	70 95       	com	r23
    1d12:	61 95       	neg	r22
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	99 23       	and	r25, r25
    1d1c:	a9 f0       	breq	.+42     	; 0x1d48 <__floatsisf+0x40>
    1d1e:	f9 2f       	mov	r31, r25
    1d20:	96 e9       	ldi	r25, 0x96	; 150
    1d22:	bb 27       	eor	r27, r27
    1d24:	93 95       	inc	r25
    1d26:	f6 95       	lsr	r31
    1d28:	87 95       	ror	r24
    1d2a:	77 95       	ror	r23
    1d2c:	67 95       	ror	r22
    1d2e:	b7 95       	ror	r27
    1d30:	f1 11       	cpse	r31, r1
    1d32:	f8 cf       	rjmp	.-16     	; 0x1d24 <__floatsisf+0x1c>
    1d34:	fa f4       	brpl	.+62     	; 0x1d74 <__floatsisf+0x6c>
    1d36:	bb 0f       	add	r27, r27
    1d38:	11 f4       	brne	.+4      	; 0x1d3e <__floatsisf+0x36>
    1d3a:	60 ff       	sbrs	r22, 0
    1d3c:	1b c0       	rjmp	.+54     	; 0x1d74 <__floatsisf+0x6c>
    1d3e:	6f 5f       	subi	r22, 0xFF	; 255
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	8f 4f       	sbci	r24, 0xFF	; 255
    1d44:	9f 4f       	sbci	r25, 0xFF	; 255
    1d46:	16 c0       	rjmp	.+44     	; 0x1d74 <__floatsisf+0x6c>
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <__floatsisf+0x48>
    1d4c:	96 e9       	ldi	r25, 0x96	; 150
    1d4e:	11 c0       	rjmp	.+34     	; 0x1d72 <__floatsisf+0x6a>
    1d50:	77 23       	and	r23, r23
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <__floatsisf+0x54>
    1d54:	9e e8       	ldi	r25, 0x8E	; 142
    1d56:	87 2f       	mov	r24, r23
    1d58:	76 2f       	mov	r23, r22
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <__floatsisf+0x5e>
    1d5c:	66 23       	and	r22, r22
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <__floatsisf+0x74>
    1d60:	96 e8       	ldi	r25, 0x86	; 134
    1d62:	86 2f       	mov	r24, r22
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	2a f0       	brmi	.+10     	; 0x1d74 <__floatsisf+0x6c>
    1d6a:	9a 95       	dec	r25
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	da f7       	brpl	.-10     	; 0x1d6a <__floatsisf+0x62>
    1d74:	88 0f       	add	r24, r24
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	97 f9       	bld	r25, 7
    1d7c:	08 95       	ret

00001d7e <__fp_cmp>:
    1d7e:	99 0f       	add	r25, r25
    1d80:	00 08       	sbc	r0, r0
    1d82:	55 0f       	add	r21, r21
    1d84:	aa 0b       	sbc	r26, r26
    1d86:	e0 e8       	ldi	r30, 0x80	; 128
    1d88:	fe ef       	ldi	r31, 0xFE	; 254
    1d8a:	16 16       	cp	r1, r22
    1d8c:	17 06       	cpc	r1, r23
    1d8e:	e8 07       	cpc	r30, r24
    1d90:	f9 07       	cpc	r31, r25
    1d92:	c0 f0       	brcs	.+48     	; 0x1dc4 <__fp_cmp+0x46>
    1d94:	12 16       	cp	r1, r18
    1d96:	13 06       	cpc	r1, r19
    1d98:	e4 07       	cpc	r30, r20
    1d9a:	f5 07       	cpc	r31, r21
    1d9c:	98 f0       	brcs	.+38     	; 0x1dc4 <__fp_cmp+0x46>
    1d9e:	62 1b       	sub	r22, r18
    1da0:	73 0b       	sbc	r23, r19
    1da2:	84 0b       	sbc	r24, r20
    1da4:	95 0b       	sbc	r25, r21
    1da6:	39 f4       	brne	.+14     	; 0x1db6 <__fp_cmp+0x38>
    1da8:	0a 26       	eor	r0, r26
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <__fp_cmp+0x46>
    1dac:	23 2b       	or	r18, r19
    1dae:	24 2b       	or	r18, r20
    1db0:	25 2b       	or	r18, r21
    1db2:	21 f4       	brne	.+8      	; 0x1dbc <__fp_cmp+0x3e>
    1db4:	08 95       	ret
    1db6:	0a 26       	eor	r0, r26
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <__fp_cmp+0x3e>
    1dba:	a1 40       	sbci	r26, 0x01	; 1
    1dbc:	a6 95       	lsr	r26
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	81 1d       	adc	r24, r1
    1dc2:	81 1d       	adc	r24, r1
    1dc4:	08 95       	ret

00001dc6 <__fp_inf>:
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	9f 67       	ori	r25, 0x7F	; 127
    1dca:	80 e8       	ldi	r24, 0x80	; 128
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	08 95       	ret

00001dd2 <__fp_nan>:
    1dd2:	9f ef       	ldi	r25, 0xFF	; 255
    1dd4:	80 ec       	ldi	r24, 0xC0	; 192
    1dd6:	08 95       	ret

00001dd8 <__fp_pscA>:
    1dd8:	00 24       	eor	r0, r0
    1dda:	0a 94       	dec	r0
    1ddc:	16 16       	cp	r1, r22
    1dde:	17 06       	cpc	r1, r23
    1de0:	18 06       	cpc	r1, r24
    1de2:	09 06       	cpc	r0, r25
    1de4:	08 95       	ret

00001de6 <__fp_pscB>:
    1de6:	00 24       	eor	r0, r0
    1de8:	0a 94       	dec	r0
    1dea:	12 16       	cp	r1, r18
    1dec:	13 06       	cpc	r1, r19
    1dee:	14 06       	cpc	r1, r20
    1df0:	05 06       	cpc	r0, r21
    1df2:	08 95       	ret

00001df4 <__fp_round>:
    1df4:	09 2e       	mov	r0, r25
    1df6:	03 94       	inc	r0
    1df8:	00 0c       	add	r0, r0
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__fp_round+0xc>
    1dfc:	88 23       	and	r24, r24
    1dfe:	52 f0       	brmi	.+20     	; 0x1e14 <__fp_round+0x20>
    1e00:	bb 0f       	add	r27, r27
    1e02:	40 f4       	brcc	.+16     	; 0x1e14 <__fp_round+0x20>
    1e04:	bf 2b       	or	r27, r31
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <__fp_round+0x18>
    1e08:	60 ff       	sbrs	r22, 0
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <__fp_round+0x20>
    1e0c:	6f 5f       	subi	r22, 0xFF	; 255
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	08 95       	ret

00001e16 <__fp_split3>:
    1e16:	57 fd       	sbrc	r21, 7
    1e18:	90 58       	subi	r25, 0x80	; 128
    1e1a:	44 0f       	add	r20, r20
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	59 f0       	breq	.+22     	; 0x1e36 <__fp_splitA+0x10>
    1e20:	5f 3f       	cpi	r21, 0xFF	; 255
    1e22:	71 f0       	breq	.+28     	; 0x1e40 <__fp_splitA+0x1a>
    1e24:	47 95       	ror	r20

00001e26 <__fp_splitA>:
    1e26:	88 0f       	add	r24, r24
    1e28:	97 fb       	bst	r25, 7
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	61 f0       	breq	.+24     	; 0x1e46 <__fp_splitA+0x20>
    1e2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e30:	79 f0       	breq	.+30     	; 0x1e50 <__fp_splitA+0x2a>
    1e32:	87 95       	ror	r24
    1e34:	08 95       	ret
    1e36:	12 16       	cp	r1, r18
    1e38:	13 06       	cpc	r1, r19
    1e3a:	14 06       	cpc	r1, r20
    1e3c:	55 1f       	adc	r21, r21
    1e3e:	f2 cf       	rjmp	.-28     	; 0x1e24 <__fp_split3+0xe>
    1e40:	46 95       	lsr	r20
    1e42:	f1 df       	rcall	.-30     	; 0x1e26 <__fp_splitA>
    1e44:	08 c0       	rjmp	.+16     	; 0x1e56 <__fp_splitA+0x30>
    1e46:	16 16       	cp	r1, r22
    1e48:	17 06       	cpc	r1, r23
    1e4a:	18 06       	cpc	r1, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	f1 cf       	rjmp	.-30     	; 0x1e32 <__fp_splitA+0xc>
    1e50:	86 95       	lsr	r24
    1e52:	71 05       	cpc	r23, r1
    1e54:	61 05       	cpc	r22, r1
    1e56:	08 94       	sec
    1e58:	08 95       	ret

00001e5a <__fp_zero>:
    1e5a:	e8 94       	clt

00001e5c <__fp_szero>:
    1e5c:	bb 27       	eor	r27, r27
    1e5e:	66 27       	eor	r22, r22
    1e60:	77 27       	eor	r23, r23
    1e62:	cb 01       	movw	r24, r22
    1e64:	97 f9       	bld	r25, 7
    1e66:	08 95       	ret

00001e68 <__gesf2>:
    1e68:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_cmp>
    1e6c:	08 f4       	brcc	.+2      	; 0x1e70 <__gesf2+0x8>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	08 95       	ret

00001e72 <log10>:
    1e72:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <log>
    1e76:	29 ed       	ldi	r18, 0xD9	; 217
    1e78:	3b e5       	ldi	r19, 0x5B	; 91
    1e7a:	4e ed       	ldi	r20, 0xDE	; 222
    1e7c:	5e e3       	ldi	r21, 0x3E	; 62
    1e7e:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__mulsf3>
    1e82:	16 f0       	brts	.+4      	; 0x1e88 <log10+0x16>
    1e84:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__fp_mpack>
    1e88:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_nan>
    1e8c:	68 94       	set
    1e8e:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_inf>

00001e92 <log>:
    1e92:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fp_splitA>
    1e96:	a8 f3       	brcs	.-22     	; 0x1e82 <log10+0x10>
    1e98:	99 23       	and	r25, r25
    1e9a:	c1 f3       	breq	.-16     	; 0x1e8c <log10+0x1a>
    1e9c:	ae f3       	brts	.-22     	; 0x1e88 <log10+0x16>
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	1f 93       	push	r17
    1ea4:	0f 93       	push	r16
    1ea6:	ff 92       	push	r15
    1ea8:	c9 2f       	mov	r28, r25
    1eaa:	dd 27       	eor	r29, r29
    1eac:	88 23       	and	r24, r24
    1eae:	2a f0       	brmi	.+10     	; 0x1eba <log+0x28>
    1eb0:	21 97       	sbiw	r28, 0x01	; 1
    1eb2:	66 0f       	add	r22, r22
    1eb4:	77 1f       	adc	r23, r23
    1eb6:	88 1f       	adc	r24, r24
    1eb8:	da f7       	brpl	.-10     	; 0x1eb0 <log+0x1e>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f eb       	ldi	r21, 0xBF	; 191
    1ec2:	9f e3       	ldi	r25, 0x3F	; 63
    1ec4:	88 39       	cpi	r24, 0x98	; 152
    1ec6:	20 f0       	brcs	.+8      	; 0x1ed0 <log+0x3e>
    1ec8:	80 3e       	cpi	r24, 0xE0	; 224
    1eca:	38 f0       	brcs	.+14     	; 0x1eda <log+0x48>
    1ecc:	21 96       	adiw	r28, 0x01	; 1
    1ece:	8f 77       	andi	r24, 0x7F	; 127
    1ed0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
    1ed4:	e8 e6       	ldi	r30, 0x68	; 104
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <log+0x50>
    1eda:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__addsf3>
    1ede:	e5 e9       	ldi	r30, 0x95	; 149
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fp_powser>
    1ee6:	8b 01       	movw	r16, r22
    1ee8:	be 01       	movw	r22, r28
    1eea:	ec 01       	movw	r28, r24
    1eec:	fb 2e       	mov	r15, r27
    1eee:	6f 57       	subi	r22, 0x7F	; 127
    1ef0:	71 09       	sbc	r23, r1
    1ef2:	75 95       	asr	r23
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 0b       	sbc	r24, r24
    1ef8:	99 0b       	sbc	r25, r25
    1efa:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatsisf>
    1efe:	28 e1       	ldi	r18, 0x18	; 24
    1f00:	32 e7       	ldi	r19, 0x72	; 114
    1f02:	41 e3       	ldi	r20, 0x31	; 49
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3x>
    1f0a:	af 2d       	mov	r26, r15
    1f0c:	98 01       	movw	r18, r16
    1f0e:	ae 01       	movw	r20, r28
    1f10:	ff 90       	pop	r15
    1f12:	0f 91       	pop	r16
    1f14:	1f 91       	pop	r17
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3x>
    1f1e:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_round>

00001f22 <__mulsf3>:
    1f22:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3x>
    1f26:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__fp_round>
    1f2a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_pscA>
    1f2e:	38 f0       	brcs	.+14     	; 0x1f3e <__mulsf3+0x1c>
    1f30:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__fp_pscB>
    1f34:	20 f0       	brcs	.+8      	; 0x1f3e <__mulsf3+0x1c>
    1f36:	95 23       	and	r25, r21
    1f38:	11 f0       	breq	.+4      	; 0x1f3e <__mulsf3+0x1c>
    1f3a:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_inf>
    1f3e:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_nan>
    1f42:	11 24       	eor	r1, r1
    1f44:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_szero>

00001f48 <__mulsf3x>:
    1f48:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__fp_split3>
    1f4c:	70 f3       	brcs	.-36     	; 0x1f2a <__mulsf3+0x8>

00001f4e <__mulsf3_pse>:
    1f4e:	95 9f       	mul	r25, r21
    1f50:	c1 f3       	breq	.-16     	; 0x1f42 <__mulsf3+0x20>
    1f52:	95 0f       	add	r25, r21
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	55 1f       	adc	r21, r21
    1f58:	62 9f       	mul	r22, r18
    1f5a:	f0 01       	movw	r30, r0
    1f5c:	72 9f       	mul	r23, r18
    1f5e:	bb 27       	eor	r27, r27
    1f60:	f0 0d       	add	r31, r0
    1f62:	b1 1d       	adc	r27, r1
    1f64:	63 9f       	mul	r22, r19
    1f66:	aa 27       	eor	r26, r26
    1f68:	f0 0d       	add	r31, r0
    1f6a:	b1 1d       	adc	r27, r1
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	64 9f       	mul	r22, r20
    1f70:	66 27       	eor	r22, r22
    1f72:	b0 0d       	add	r27, r0
    1f74:	a1 1d       	adc	r26, r1
    1f76:	66 1f       	adc	r22, r22
    1f78:	82 9f       	mul	r24, r18
    1f7a:	22 27       	eor	r18, r18
    1f7c:	b0 0d       	add	r27, r0
    1f7e:	a1 1d       	adc	r26, r1
    1f80:	62 1f       	adc	r22, r18
    1f82:	73 9f       	mul	r23, r19
    1f84:	b0 0d       	add	r27, r0
    1f86:	a1 1d       	adc	r26, r1
    1f88:	62 1f       	adc	r22, r18
    1f8a:	83 9f       	mul	r24, r19
    1f8c:	a0 0d       	add	r26, r0
    1f8e:	61 1d       	adc	r22, r1
    1f90:	22 1f       	adc	r18, r18
    1f92:	74 9f       	mul	r23, r20
    1f94:	33 27       	eor	r19, r19
    1f96:	a0 0d       	add	r26, r0
    1f98:	61 1d       	adc	r22, r1
    1f9a:	23 1f       	adc	r18, r19
    1f9c:	84 9f       	mul	r24, r20
    1f9e:	60 0d       	add	r22, r0
    1fa0:	21 1d       	adc	r18, r1
    1fa2:	82 2f       	mov	r24, r18
    1fa4:	76 2f       	mov	r23, r22
    1fa6:	6a 2f       	mov	r22, r26
    1fa8:	11 24       	eor	r1, r1
    1faa:	9f 57       	subi	r25, 0x7F	; 127
    1fac:	50 40       	sbci	r21, 0x00	; 0
    1fae:	9a f0       	brmi	.+38     	; 0x1fd6 <__mulsf3_pse+0x88>
    1fb0:	f1 f0       	breq	.+60     	; 0x1fee <__mulsf3_pse+0xa0>
    1fb2:	88 23       	and	r24, r24
    1fb4:	4a f0       	brmi	.+18     	; 0x1fc8 <__mulsf3_pse+0x7a>
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	91 50       	subi	r25, 0x01	; 1
    1fc4:	50 40       	sbci	r21, 0x00	; 0
    1fc6:	a9 f7       	brne	.-22     	; 0x1fb2 <__mulsf3_pse+0x64>
    1fc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fca:	51 05       	cpc	r21, r1
    1fcc:	80 f0       	brcs	.+32     	; 0x1fee <__mulsf3_pse+0xa0>
    1fce:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__fp_inf>
    1fd2:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__fp_szero>
    1fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd8:	e4 f3       	brlt	.-8      	; 0x1fd2 <__mulsf3_pse+0x84>
    1fda:	98 3e       	cpi	r25, 0xE8	; 232
    1fdc:	d4 f3       	brlt	.-12     	; 0x1fd2 <__mulsf3_pse+0x84>
    1fde:	86 95       	lsr	r24
    1fe0:	77 95       	ror	r23
    1fe2:	67 95       	ror	r22
    1fe4:	b7 95       	ror	r27
    1fe6:	f7 95       	ror	r31
    1fe8:	e7 95       	ror	r30
    1fea:	9f 5f       	subi	r25, 0xFF	; 255
    1fec:	c1 f7       	brne	.-16     	; 0x1fde <__mulsf3_pse+0x90>
    1fee:	fe 2b       	or	r31, r30
    1ff0:	88 0f       	add	r24, r24
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	96 95       	lsr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	97 f9       	bld	r25, 7
    1ffa:	08 95       	ret
    1ffc:	19 f4       	brne	.+6      	; 0x2004 <__mulsf3_pse+0xb6>
    1ffe:	16 f4       	brtc	.+4      	; 0x2004 <__mulsf3_pse+0xb6>
    2000:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_nan>
    2004:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__fp_mpack>

00002008 <sqrt>:
    2008:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fp_splitA>
    200c:	b8 f3       	brcs	.-18     	; 0x1ffc <__mulsf3_pse+0xae>
    200e:	99 23       	and	r25, r25
    2010:	c9 f3       	breq	.-14     	; 0x2004 <__mulsf3_pse+0xb6>
    2012:	b6 f3       	brts	.-20     	; 0x2000 <__mulsf3_pse+0xb2>
    2014:	9f 57       	subi	r25, 0x7F	; 127
    2016:	55 0b       	sbc	r21, r21
    2018:	87 ff       	sbrs	r24, 7
    201a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__fp_norm2>
    201e:	00 24       	eor	r0, r0
    2020:	a0 e6       	ldi	r26, 0x60	; 96
    2022:	40 ea       	ldi	r20, 0xA0	; 160
    2024:	90 01       	movw	r18, r0
    2026:	80 58       	subi	r24, 0x80	; 128
    2028:	56 95       	lsr	r21
    202a:	97 95       	ror	r25
    202c:	28 f4       	brcc	.+10     	; 0x2038 <sqrt+0x30>
    202e:	80 5c       	subi	r24, 0xC0	; 192
    2030:	66 0f       	add	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	20 f0       	brcs	.+8      	; 0x2040 <sqrt+0x38>
    2038:	26 17       	cp	r18, r22
    203a:	37 07       	cpc	r19, r23
    203c:	48 07       	cpc	r20, r24
    203e:	30 f4       	brcc	.+12     	; 0x204c <sqrt+0x44>
    2040:	62 1b       	sub	r22, r18
    2042:	73 0b       	sbc	r23, r19
    2044:	84 0b       	sbc	r24, r20
    2046:	20 29       	or	r18, r0
    2048:	31 29       	or	r19, r1
    204a:	4a 2b       	or	r20, r26
    204c:	a6 95       	lsr	r26
    204e:	17 94       	ror	r1
    2050:	07 94       	ror	r0
    2052:	20 25       	eor	r18, r0
    2054:	31 25       	eor	r19, r1
    2056:	4a 27       	eor	r20, r26
    2058:	58 f7       	brcc	.-42     	; 0x2030 <sqrt+0x28>
    205a:	66 0f       	add	r22, r22
    205c:	77 1f       	adc	r23, r23
    205e:	88 1f       	adc	r24, r24
    2060:	20 f0       	brcs	.+8      	; 0x206a <sqrt+0x62>
    2062:	26 17       	cp	r18, r22
    2064:	37 07       	cpc	r19, r23
    2066:	48 07       	cpc	r20, r24
    2068:	30 f4       	brcc	.+12     	; 0x2076 <sqrt+0x6e>
    206a:	62 0b       	sbc	r22, r18
    206c:	73 0b       	sbc	r23, r19
    206e:	84 0b       	sbc	r24, r20
    2070:	20 0d       	add	r18, r0
    2072:	31 1d       	adc	r19, r1
    2074:	41 1d       	adc	r20, r1
    2076:	a0 95       	com	r26
    2078:	81 f7       	brne	.-32     	; 0x205a <sqrt+0x52>
    207a:	b9 01       	movw	r22, r18
    207c:	84 2f       	mov	r24, r20
    207e:	91 58       	subi	r25, 0x81	; 129
    2080:	88 0f       	add	r24, r24
    2082:	96 95       	lsr	r25
    2084:	87 95       	ror	r24
    2086:	08 95       	ret

00002088 <__fp_mpack>:
    2088:	9f 3f       	cpi	r25, 0xFF	; 255
    208a:	31 f0       	breq	.+12     	; 0x2098 <__fp_mpack_finite+0xc>

0000208c <__fp_mpack_finite>:
    208c:	91 50       	subi	r25, 0x01	; 1
    208e:	20 f4       	brcc	.+8      	; 0x2098 <__fp_mpack_finite+0xc>
    2090:	87 95       	ror	r24
    2092:	77 95       	ror	r23
    2094:	67 95       	ror	r22
    2096:	b7 95       	ror	r27
    2098:	88 0f       	add	r24, r24
    209a:	91 1d       	adc	r25, r1
    209c:	96 95       	lsr	r25
    209e:	87 95       	ror	r24
    20a0:	97 f9       	bld	r25, 7
    20a2:	08 95       	ret

000020a4 <__fp_norm2>:
    20a4:	91 50       	subi	r25, 0x01	; 1
    20a6:	50 40       	sbci	r21, 0x00	; 0
    20a8:	66 0f       	add	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	88 1f       	adc	r24, r24
    20ae:	d2 f7       	brpl	.-12     	; 0x20a4 <__fp_norm2>
    20b0:	08 95       	ret

000020b2 <__fp_powser>:
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	1f 93       	push	r17
    20b8:	0f 93       	push	r16
    20ba:	ff 92       	push	r15
    20bc:	ef 92       	push	r14
    20be:	df 92       	push	r13
    20c0:	7b 01       	movw	r14, r22
    20c2:	8c 01       	movw	r16, r24
    20c4:	68 94       	set
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <__fp_powser+0x22>
    20c8:	da 2e       	mov	r13, r26
    20ca:	ef 01       	movw	r28, r30
    20cc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3x>
    20d0:	fe 01       	movw	r30, r28
    20d2:	e8 94       	clt
    20d4:	a5 91       	lpm	r26, Z+
    20d6:	25 91       	lpm	r18, Z+
    20d8:	35 91       	lpm	r19, Z+
    20da:	45 91       	lpm	r20, Z+
    20dc:	55 91       	lpm	r21, Z+
    20de:	a6 f3       	brts	.-24     	; 0x20c8 <__fp_powser+0x16>
    20e0:	ef 01       	movw	r28, r30
    20e2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__addsf3x>
    20e6:	fe 01       	movw	r30, r28
    20e8:	97 01       	movw	r18, r14
    20ea:	a8 01       	movw	r20, r16
    20ec:	da 94       	dec	r13
    20ee:	69 f7       	brne	.-38     	; 0x20ca <__fp_powser+0x18>
    20f0:	df 90       	pop	r13
    20f2:	ef 90       	pop	r14
    20f4:	ff 90       	pop	r15
    20f6:	0f 91       	pop	r16
    20f8:	1f 91       	pop	r17
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <vfprintf>:
    2100:	a0 e1       	ldi	r26, 0x10	; 16
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e8       	ldi	r30, 0x86	; 134
    2106:	f0 e1       	ldi	r31, 0x10	; 16
    2108:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__prologue_saves__>
    210c:	7c 01       	movw	r14, r24
    210e:	1b 01       	movw	r2, r22
    2110:	6a 01       	movw	r12, r20
    2112:	fc 01       	movw	r30, r24
    2114:	17 82       	std	Z+7, r1	; 0x07
    2116:	16 82       	std	Z+6, r1	; 0x06
    2118:	83 81       	ldd	r24, Z+3	; 0x03
    211a:	81 ff       	sbrs	r24, 1
    211c:	44 c3       	rjmp	.+1672   	; 0x27a6 <vfprintf+0x6a6>
    211e:	9e 01       	movw	r18, r28
    2120:	2f 5f       	subi	r18, 0xFF	; 255
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	39 01       	movw	r6, r18
    2126:	f7 01       	movw	r30, r14
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	f1 01       	movw	r30, r2
    212c:	93 fd       	sbrc	r25, 3
    212e:	85 91       	lpm	r24, Z+
    2130:	93 ff       	sbrs	r25, 3
    2132:	81 91       	ld	r24, Z+
    2134:	1f 01       	movw	r2, r30
    2136:	88 23       	and	r24, r24
    2138:	09 f4       	brne	.+2      	; 0x213c <vfprintf+0x3c>
    213a:	31 c3       	rjmp	.+1634   	; 0x279e <vfprintf+0x69e>
    213c:	85 32       	cpi	r24, 0x25	; 37
    213e:	39 f4       	brne	.+14     	; 0x214e <vfprintf+0x4e>
    2140:	93 fd       	sbrc	r25, 3
    2142:	85 91       	lpm	r24, Z+
    2144:	93 ff       	sbrs	r25, 3
    2146:	81 91       	ld	r24, Z+
    2148:	1f 01       	movw	r2, r30
    214a:	85 32       	cpi	r24, 0x25	; 37
    214c:	39 f4       	brne	.+14     	; 0x215c <vfprintf+0x5c>
    214e:	b7 01       	movw	r22, r14
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2156:	56 01       	movw	r10, r12
    2158:	65 01       	movw	r12, r10
    215a:	e5 cf       	rjmp	.-54     	; 0x2126 <vfprintf+0x26>
    215c:	10 e0       	ldi	r17, 0x00	; 0
    215e:	51 2c       	mov	r5, r1
    2160:	91 2c       	mov	r9, r1
    2162:	ff e1       	ldi	r31, 0x1F	; 31
    2164:	f9 15       	cp	r31, r9
    2166:	d8 f0       	brcs	.+54     	; 0x219e <vfprintf+0x9e>
    2168:	8b 32       	cpi	r24, 0x2B	; 43
    216a:	79 f0       	breq	.+30     	; 0x218a <vfprintf+0x8a>
    216c:	38 f4       	brcc	.+14     	; 0x217c <vfprintf+0x7c>
    216e:	80 32       	cpi	r24, 0x20	; 32
    2170:	79 f0       	breq	.+30     	; 0x2190 <vfprintf+0x90>
    2172:	83 32       	cpi	r24, 0x23	; 35
    2174:	a1 f4       	brne	.+40     	; 0x219e <vfprintf+0x9e>
    2176:	f9 2d       	mov	r31, r9
    2178:	f0 61       	ori	r31, 0x10	; 16
    217a:	2e c0       	rjmp	.+92     	; 0x21d8 <vfprintf+0xd8>
    217c:	8d 32       	cpi	r24, 0x2D	; 45
    217e:	61 f0       	breq	.+24     	; 0x2198 <vfprintf+0x98>
    2180:	80 33       	cpi	r24, 0x30	; 48
    2182:	69 f4       	brne	.+26     	; 0x219e <vfprintf+0x9e>
    2184:	29 2d       	mov	r18, r9
    2186:	21 60       	ori	r18, 0x01	; 1
    2188:	2d c0       	rjmp	.+90     	; 0x21e4 <vfprintf+0xe4>
    218a:	39 2d       	mov	r19, r9
    218c:	32 60       	ori	r19, 0x02	; 2
    218e:	93 2e       	mov	r9, r19
    2190:	89 2d       	mov	r24, r9
    2192:	84 60       	ori	r24, 0x04	; 4
    2194:	98 2e       	mov	r9, r24
    2196:	2a c0       	rjmp	.+84     	; 0x21ec <vfprintf+0xec>
    2198:	e9 2d       	mov	r30, r9
    219a:	e8 60       	ori	r30, 0x08	; 8
    219c:	15 c0       	rjmp	.+42     	; 0x21c8 <vfprintf+0xc8>
    219e:	97 fc       	sbrc	r9, 7
    21a0:	2d c0       	rjmp	.+90     	; 0x21fc <vfprintf+0xfc>
    21a2:	20 ed       	ldi	r18, 0xD0	; 208
    21a4:	28 0f       	add	r18, r24
    21a6:	2a 30       	cpi	r18, 0x0A	; 10
    21a8:	88 f4       	brcc	.+34     	; 0x21cc <vfprintf+0xcc>
    21aa:	96 fe       	sbrs	r9, 6
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <vfprintf+0xba>
    21ae:	3a e0       	ldi	r19, 0x0A	; 10
    21b0:	13 9f       	mul	r17, r19
    21b2:	20 0d       	add	r18, r0
    21b4:	11 24       	eor	r1, r1
    21b6:	12 2f       	mov	r17, r18
    21b8:	19 c0       	rjmp	.+50     	; 0x21ec <vfprintf+0xec>
    21ba:	8a e0       	ldi	r24, 0x0A	; 10
    21bc:	58 9e       	mul	r5, r24
    21be:	20 0d       	add	r18, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	52 2e       	mov	r5, r18
    21c4:	e9 2d       	mov	r30, r9
    21c6:	e0 62       	ori	r30, 0x20	; 32
    21c8:	9e 2e       	mov	r9, r30
    21ca:	10 c0       	rjmp	.+32     	; 0x21ec <vfprintf+0xec>
    21cc:	8e 32       	cpi	r24, 0x2E	; 46
    21ce:	31 f4       	brne	.+12     	; 0x21dc <vfprintf+0xdc>
    21d0:	96 fc       	sbrc	r9, 6
    21d2:	e5 c2       	rjmp	.+1482   	; 0x279e <vfprintf+0x69e>
    21d4:	f9 2d       	mov	r31, r9
    21d6:	f0 64       	ori	r31, 0x40	; 64
    21d8:	9f 2e       	mov	r9, r31
    21da:	08 c0       	rjmp	.+16     	; 0x21ec <vfprintf+0xec>
    21dc:	8c 36       	cpi	r24, 0x6C	; 108
    21de:	21 f4       	brne	.+8      	; 0x21e8 <vfprintf+0xe8>
    21e0:	29 2d       	mov	r18, r9
    21e2:	20 68       	ori	r18, 0x80	; 128
    21e4:	92 2e       	mov	r9, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <vfprintf+0xec>
    21e8:	88 36       	cpi	r24, 0x68	; 104
    21ea:	41 f4       	brne	.+16     	; 0x21fc <vfprintf+0xfc>
    21ec:	f1 01       	movw	r30, r2
    21ee:	93 fd       	sbrc	r25, 3
    21f0:	85 91       	lpm	r24, Z+
    21f2:	93 ff       	sbrs	r25, 3
    21f4:	81 91       	ld	r24, Z+
    21f6:	1f 01       	movw	r2, r30
    21f8:	81 11       	cpse	r24, r1
    21fa:	b3 cf       	rjmp	.-154    	; 0x2162 <vfprintf+0x62>
    21fc:	9b eb       	ldi	r25, 0xBB	; 187
    21fe:	98 0f       	add	r25, r24
    2200:	93 30       	cpi	r25, 0x03	; 3
    2202:	20 f4       	brcc	.+8      	; 0x220c <vfprintf+0x10c>
    2204:	99 2d       	mov	r25, r9
    2206:	90 61       	ori	r25, 0x10	; 16
    2208:	80 5e       	subi	r24, 0xE0	; 224
    220a:	07 c0       	rjmp	.+14     	; 0x221a <vfprintf+0x11a>
    220c:	9b e9       	ldi	r25, 0x9B	; 155
    220e:	98 0f       	add	r25, r24
    2210:	93 30       	cpi	r25, 0x03	; 3
    2212:	08 f0       	brcs	.+2      	; 0x2216 <vfprintf+0x116>
    2214:	66 c1       	rjmp	.+716    	; 0x24e2 <vfprintf+0x3e2>
    2216:	99 2d       	mov	r25, r9
    2218:	9f 7e       	andi	r25, 0xEF	; 239
    221a:	96 ff       	sbrs	r25, 6
    221c:	16 e0       	ldi	r17, 0x06	; 6
    221e:	9f 73       	andi	r25, 0x3F	; 63
    2220:	99 2e       	mov	r9, r25
    2222:	85 36       	cpi	r24, 0x65	; 101
    2224:	19 f4       	brne	.+6      	; 0x222c <vfprintf+0x12c>
    2226:	90 64       	ori	r25, 0x40	; 64
    2228:	99 2e       	mov	r9, r25
    222a:	08 c0       	rjmp	.+16     	; 0x223c <vfprintf+0x13c>
    222c:	86 36       	cpi	r24, 0x66	; 102
    222e:	21 f4       	brne	.+8      	; 0x2238 <vfprintf+0x138>
    2230:	39 2f       	mov	r19, r25
    2232:	30 68       	ori	r19, 0x80	; 128
    2234:	93 2e       	mov	r9, r19
    2236:	02 c0       	rjmp	.+4      	; 0x223c <vfprintf+0x13c>
    2238:	11 11       	cpse	r17, r1
    223a:	11 50       	subi	r17, 0x01	; 1
    223c:	97 fe       	sbrs	r9, 7
    223e:	07 c0       	rjmp	.+14     	; 0x224e <vfprintf+0x14e>
    2240:	1c 33       	cpi	r17, 0x3C	; 60
    2242:	50 f4       	brcc	.+20     	; 0x2258 <vfprintf+0x158>
    2244:	44 24       	eor	r4, r4
    2246:	43 94       	inc	r4
    2248:	41 0e       	add	r4, r17
    224a:	27 e0       	ldi	r18, 0x07	; 7
    224c:	0b c0       	rjmp	.+22     	; 0x2264 <vfprintf+0x164>
    224e:	18 30       	cpi	r17, 0x08	; 8
    2250:	38 f0       	brcs	.+14     	; 0x2260 <vfprintf+0x160>
    2252:	27 e0       	ldi	r18, 0x07	; 7
    2254:	17 e0       	ldi	r17, 0x07	; 7
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <vfprintf+0x162>
    2258:	27 e0       	ldi	r18, 0x07	; 7
    225a:	9c e3       	ldi	r25, 0x3C	; 60
    225c:	49 2e       	mov	r4, r25
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x164>
    2260:	21 2f       	mov	r18, r17
    2262:	41 2c       	mov	r4, r1
    2264:	56 01       	movw	r10, r12
    2266:	84 e0       	ldi	r24, 0x04	; 4
    2268:	a8 0e       	add	r10, r24
    226a:	b1 1c       	adc	r11, r1
    226c:	f6 01       	movw	r30, r12
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	04 2d       	mov	r16, r4
    2278:	a3 01       	movw	r20, r6
    227a:	0e 94 34 14 	call	0x2868	; 0x2868 <__ftoa_engine>
    227e:	6c 01       	movw	r12, r24
    2280:	f9 81       	ldd	r31, Y+1	; 0x01
    2282:	fc 87       	std	Y+12, r31	; 0x0c
    2284:	f0 ff       	sbrs	r31, 0
    2286:	02 c0       	rjmp	.+4      	; 0x228c <vfprintf+0x18c>
    2288:	f3 ff       	sbrs	r31, 3
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <vfprintf+0x198>
    228c:	91 fc       	sbrc	r9, 1
    228e:	06 c0       	rjmp	.+12     	; 0x229c <vfprintf+0x19c>
    2290:	92 fe       	sbrs	r9, 2
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <vfprintf+0x1a0>
    2294:	00 e2       	ldi	r16, 0x20	; 32
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <vfprintf+0x1a2>
    2298:	0d e2       	ldi	r16, 0x2D	; 45
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <vfprintf+0x1a2>
    229c:	0b e2       	ldi	r16, 0x2B	; 43
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <vfprintf+0x1a2>
    22a0:	00 e0       	ldi	r16, 0x00	; 0
    22a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    22a4:	8c 70       	andi	r24, 0x0C	; 12
    22a6:	19 f0       	breq	.+6      	; 0x22ae <vfprintf+0x1ae>
    22a8:	01 11       	cpse	r16, r1
    22aa:	5a c2       	rjmp	.+1204   	; 0x2760 <vfprintf+0x660>
    22ac:	9b c2       	rjmp	.+1334   	; 0x27e4 <vfprintf+0x6e4>
    22ae:	97 fe       	sbrs	r9, 7
    22b0:	10 c0       	rjmp	.+32     	; 0x22d2 <vfprintf+0x1d2>
    22b2:	4c 0c       	add	r4, r12
    22b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    22b6:	f4 ff       	sbrs	r31, 4
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <vfprintf+0x1c2>
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	81 33       	cpi	r24, 0x31	; 49
    22be:	09 f4       	brne	.+2      	; 0x22c2 <vfprintf+0x1c2>
    22c0:	4a 94       	dec	r4
    22c2:	14 14       	cp	r1, r4
    22c4:	74 f5       	brge	.+92     	; 0x2322 <vfprintf+0x222>
    22c6:	28 e0       	ldi	r18, 0x08	; 8
    22c8:	24 15       	cp	r18, r4
    22ca:	78 f5       	brcc	.+94     	; 0x232a <vfprintf+0x22a>
    22cc:	88 e0       	ldi	r24, 0x08	; 8
    22ce:	48 2e       	mov	r4, r24
    22d0:	2c c0       	rjmp	.+88     	; 0x232a <vfprintf+0x22a>
    22d2:	96 fc       	sbrc	r9, 6
    22d4:	2a c0       	rjmp	.+84     	; 0x232a <vfprintf+0x22a>
    22d6:	81 2f       	mov	r24, r17
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	8c 15       	cp	r24, r12
    22dc:	9d 05       	cpc	r25, r13
    22de:	9c f0       	brlt	.+38     	; 0x2306 <vfprintf+0x206>
    22e0:	3c ef       	ldi	r19, 0xFC	; 252
    22e2:	c3 16       	cp	r12, r19
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	d3 06       	cpc	r13, r19
    22e8:	74 f0       	brlt	.+28     	; 0x2306 <vfprintf+0x206>
    22ea:	89 2d       	mov	r24, r9
    22ec:	80 68       	ori	r24, 0x80	; 128
    22ee:	98 2e       	mov	r9, r24
    22f0:	0a c0       	rjmp	.+20     	; 0x2306 <vfprintf+0x206>
    22f2:	e2 e0       	ldi	r30, 0x02	; 2
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	ec 0f       	add	r30, r28
    22f8:	fd 1f       	adc	r31, r29
    22fa:	e1 0f       	add	r30, r17
    22fc:	f1 1d       	adc	r31, r1
    22fe:	80 81       	ld	r24, Z
    2300:	80 33       	cpi	r24, 0x30	; 48
    2302:	19 f4       	brne	.+6      	; 0x230a <vfprintf+0x20a>
    2304:	11 50       	subi	r17, 0x01	; 1
    2306:	11 11       	cpse	r17, r1
    2308:	f4 cf       	rjmp	.-24     	; 0x22f2 <vfprintf+0x1f2>
    230a:	97 fe       	sbrs	r9, 7
    230c:	0e c0       	rjmp	.+28     	; 0x232a <vfprintf+0x22a>
    230e:	44 24       	eor	r4, r4
    2310:	43 94       	inc	r4
    2312:	41 0e       	add	r4, r17
    2314:	81 2f       	mov	r24, r17
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	c8 16       	cp	r12, r24
    231a:	d9 06       	cpc	r13, r25
    231c:	2c f4       	brge	.+10     	; 0x2328 <vfprintf+0x228>
    231e:	1c 19       	sub	r17, r12
    2320:	04 c0       	rjmp	.+8      	; 0x232a <vfprintf+0x22a>
    2322:	44 24       	eor	r4, r4
    2324:	43 94       	inc	r4
    2326:	01 c0       	rjmp	.+2      	; 0x232a <vfprintf+0x22a>
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	97 fe       	sbrs	r9, 7
    232c:	06 c0       	rjmp	.+12     	; 0x233a <vfprintf+0x23a>
    232e:	1c 14       	cp	r1, r12
    2330:	1d 04       	cpc	r1, r13
    2332:	34 f4       	brge	.+12     	; 0x2340 <vfprintf+0x240>
    2334:	c6 01       	movw	r24, r12
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <vfprintf+0x244>
    233a:	85 e0       	ldi	r24, 0x05	; 5
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <vfprintf+0x244>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	01 11       	cpse	r16, r1
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	11 23       	and	r17, r17
    234a:	31 f0       	breq	.+12     	; 0x2358 <vfprintf+0x258>
    234c:	21 2f       	mov	r18, r17
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	2f 5f       	subi	r18, 0xFF	; 255
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	25 2d       	mov	r18, r5
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	82 17       	cp	r24, r18
    235e:	93 07       	cpc	r25, r19
    2360:	14 f4       	brge	.+4      	; 0x2366 <vfprintf+0x266>
    2362:	58 1a       	sub	r5, r24
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <vfprintf+0x268>
    2366:	51 2c       	mov	r5, r1
    2368:	89 2d       	mov	r24, r9
    236a:	89 70       	andi	r24, 0x09	; 9
    236c:	49 f4       	brne	.+18     	; 0x2380 <vfprintf+0x280>
    236e:	55 20       	and	r5, r5
    2370:	39 f0       	breq	.+14     	; 0x2380 <vfprintf+0x280>
    2372:	b7 01       	movw	r22, r14
    2374:	80 e2       	ldi	r24, 0x20	; 32
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    237c:	5a 94       	dec	r5
    237e:	f7 cf       	rjmp	.-18     	; 0x236e <vfprintf+0x26e>
    2380:	00 23       	and	r16, r16
    2382:	29 f0       	breq	.+10     	; 0x238e <vfprintf+0x28e>
    2384:	b7 01       	movw	r22, r14
    2386:	80 2f       	mov	r24, r16
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    238e:	93 fc       	sbrc	r9, 3
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <vfprintf+0x2a4>
    2392:	55 20       	and	r5, r5
    2394:	39 f0       	breq	.+14     	; 0x23a4 <vfprintf+0x2a4>
    2396:	b7 01       	movw	r22, r14
    2398:	80 e3       	ldi	r24, 0x30	; 48
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    23a0:	5a 94       	dec	r5
    23a2:	f7 cf       	rjmp	.-18     	; 0x2392 <vfprintf+0x292>
    23a4:	97 fe       	sbrs	r9, 7
    23a6:	4c c0       	rjmp	.+152    	; 0x2440 <vfprintf+0x340>
    23a8:	46 01       	movw	r8, r12
    23aa:	d7 fe       	sbrs	r13, 7
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <vfprintf+0x2b2>
    23ae:	81 2c       	mov	r8, r1
    23b0:	91 2c       	mov	r9, r1
    23b2:	c6 01       	movw	r24, r12
    23b4:	88 19       	sub	r24, r8
    23b6:	99 09       	sbc	r25, r9
    23b8:	f3 01       	movw	r30, r6
    23ba:	e8 0f       	add	r30, r24
    23bc:	f9 1f       	adc	r31, r25
    23be:	fe 87       	std	Y+14, r31	; 0x0e
    23c0:	ed 87       	std	Y+13, r30	; 0x0d
    23c2:	96 01       	movw	r18, r12
    23c4:	24 19       	sub	r18, r4
    23c6:	31 09       	sbc	r19, r1
    23c8:	38 8b       	std	Y+16, r19	; 0x10
    23ca:	2f 87       	std	Y+15, r18	; 0x0f
    23cc:	01 2f       	mov	r16, r17
    23ce:	10 e0       	ldi	r17, 0x00	; 0
    23d0:	11 95       	neg	r17
    23d2:	01 95       	neg	r16
    23d4:	11 09       	sbc	r17, r1
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	83 16       	cp	r8, r19
    23da:	93 06       	cpc	r9, r19
    23dc:	29 f4       	brne	.+10     	; 0x23e8 <vfprintf+0x2e8>
    23de:	b7 01       	movw	r22, r14
    23e0:	8e e2       	ldi	r24, 0x2E	; 46
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    23e8:	c8 14       	cp	r12, r8
    23ea:	d9 04       	cpc	r13, r9
    23ec:	4c f0       	brlt	.+18     	; 0x2400 <vfprintf+0x300>
    23ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f0:	98 89       	ldd	r25, Y+16	; 0x10
    23f2:	88 15       	cp	r24, r8
    23f4:	99 05       	cpc	r25, r9
    23f6:	24 f4       	brge	.+8      	; 0x2400 <vfprintf+0x300>
    23f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    23fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    23fc:	81 81       	ldd	r24, Z+1	; 0x01
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <vfprintf+0x302>
    2400:	80 e3       	ldi	r24, 0x30	; 48
    2402:	f1 e0       	ldi	r31, 0x01	; 1
    2404:	8f 1a       	sub	r8, r31
    2406:	91 08       	sbc	r9, r1
    2408:	2d 85       	ldd	r18, Y+13	; 0x0d
    240a:	3e 85       	ldd	r19, Y+14	; 0x0e
    240c:	2f 5f       	subi	r18, 0xFF	; 255
    240e:	3f 4f       	sbci	r19, 0xFF	; 255
    2410:	3e 87       	std	Y+14, r19	; 0x0e
    2412:	2d 87       	std	Y+13, r18	; 0x0d
    2414:	80 16       	cp	r8, r16
    2416:	91 06       	cpc	r9, r17
    2418:	2c f0       	brlt	.+10     	; 0x2424 <vfprintf+0x324>
    241a:	b7 01       	movw	r22, r14
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2422:	d9 cf       	rjmp	.-78     	; 0x23d6 <vfprintf+0x2d6>
    2424:	c8 14       	cp	r12, r8
    2426:	d9 04       	cpc	r13, r9
    2428:	41 f4       	brne	.+16     	; 0x243a <vfprintf+0x33a>
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	96 33       	cpi	r25, 0x36	; 54
    242e:	20 f4       	brcc	.+8      	; 0x2438 <vfprintf+0x338>
    2430:	95 33       	cpi	r25, 0x35	; 53
    2432:	19 f4       	brne	.+6      	; 0x243a <vfprintf+0x33a>
    2434:	3c 85       	ldd	r19, Y+12	; 0x0c
    2436:	34 ff       	sbrs	r19, 4
    2438:	81 e3       	ldi	r24, 0x31	; 49
    243a:	b7 01       	movw	r22, r14
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	4e c0       	rjmp	.+156    	; 0x24dc <vfprintf+0x3dc>
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	81 33       	cpi	r24, 0x31	; 49
    2444:	19 f0       	breq	.+6      	; 0x244c <vfprintf+0x34c>
    2446:	9c 85       	ldd	r25, Y+12	; 0x0c
    2448:	9f 7e       	andi	r25, 0xEF	; 239
    244a:	9c 87       	std	Y+12, r25	; 0x0c
    244c:	b7 01       	movw	r22, r14
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2454:	11 11       	cpse	r17, r1
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <vfprintf+0x362>
    2458:	94 fc       	sbrc	r9, 4
    245a:	18 c0       	rjmp	.+48     	; 0x248c <vfprintf+0x38c>
    245c:	85 e6       	ldi	r24, 0x65	; 101
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	17 c0       	rjmp	.+46     	; 0x2490 <vfprintf+0x390>
    2462:	b7 01       	movw	r22, r14
    2464:	8e e2       	ldi	r24, 0x2E	; 46
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    246c:	1e 5f       	subi	r17, 0xFE	; 254
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	01 e0       	ldi	r16, 0x01	; 1
    2472:	08 0f       	add	r16, r24
    2474:	f3 01       	movw	r30, r6
    2476:	e8 0f       	add	r30, r24
    2478:	f1 1d       	adc	r31, r1
    247a:	80 81       	ld	r24, Z
    247c:	b7 01       	movw	r22, r14
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2484:	80 2f       	mov	r24, r16
    2486:	01 13       	cpse	r16, r17
    2488:	f3 cf       	rjmp	.-26     	; 0x2470 <vfprintf+0x370>
    248a:	e6 cf       	rjmp	.-52     	; 0x2458 <vfprintf+0x358>
    248c:	85 e4       	ldi	r24, 0x45	; 69
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	b7 01       	movw	r22, r14
    2492:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2496:	d7 fc       	sbrc	r13, 7
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <vfprintf+0x3a6>
    249a:	c1 14       	cp	r12, r1
    249c:	d1 04       	cpc	r13, r1
    249e:	41 f4       	brne	.+16     	; 0x24b0 <vfprintf+0x3b0>
    24a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    24a2:	e4 ff       	sbrs	r30, 4
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <vfprintf+0x3b0>
    24a6:	d1 94       	neg	r13
    24a8:	c1 94       	neg	r12
    24aa:	d1 08       	sbc	r13, r1
    24ac:	8d e2       	ldi	r24, 0x2D	; 45
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <vfprintf+0x3b2>
    24b0:	8b e2       	ldi	r24, 0x2B	; 43
    24b2:	b7 01       	movw	r22, r14
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    24ba:	80 e3       	ldi	r24, 0x30	; 48
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	c2 16       	cp	r12, r18
    24c0:	d1 04       	cpc	r13, r1
    24c2:	2c f0       	brlt	.+10     	; 0x24ce <vfprintf+0x3ce>
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	fa e0       	ldi	r31, 0x0A	; 10
    24c8:	cf 1a       	sub	r12, r31
    24ca:	d1 08       	sbc	r13, r1
    24cc:	f7 cf       	rjmp	.-18     	; 0x24bc <vfprintf+0x3bc>
    24ce:	b7 01       	movw	r22, r14
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    24d6:	b7 01       	movw	r22, r14
    24d8:	c6 01       	movw	r24, r12
    24da:	c0 96       	adiw	r24, 0x30	; 48
    24dc:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    24e0:	54 c1       	rjmp	.+680    	; 0x278a <vfprintf+0x68a>
    24e2:	83 36       	cpi	r24, 0x63	; 99
    24e4:	31 f0       	breq	.+12     	; 0x24f2 <vfprintf+0x3f2>
    24e6:	83 37       	cpi	r24, 0x73	; 115
    24e8:	79 f0       	breq	.+30     	; 0x2508 <vfprintf+0x408>
    24ea:	83 35       	cpi	r24, 0x53	; 83
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <vfprintf+0x3f0>
    24ee:	56 c0       	rjmp	.+172    	; 0x259c <vfprintf+0x49c>
    24f0:	20 c0       	rjmp	.+64     	; 0x2532 <vfprintf+0x432>
    24f2:	56 01       	movw	r10, r12
    24f4:	32 e0       	ldi	r19, 0x02	; 2
    24f6:	a3 0e       	add	r10, r19
    24f8:	b1 1c       	adc	r11, r1
    24fa:	f6 01       	movw	r30, r12
    24fc:	80 81       	ld	r24, Z
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	01 e0       	ldi	r16, 0x01	; 1
    2502:	10 e0       	ldi	r17, 0x00	; 0
    2504:	63 01       	movw	r12, r6
    2506:	12 c0       	rjmp	.+36     	; 0x252c <vfprintf+0x42c>
    2508:	56 01       	movw	r10, r12
    250a:	f2 e0       	ldi	r31, 0x02	; 2
    250c:	af 0e       	add	r10, r31
    250e:	b1 1c       	adc	r11, r1
    2510:	f6 01       	movw	r30, r12
    2512:	c0 80       	ld	r12, Z
    2514:	d1 80       	ldd	r13, Z+1	; 0x01
    2516:	96 fe       	sbrs	r9, 6
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <vfprintf+0x420>
    251a:	61 2f       	mov	r22, r17
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <vfprintf+0x424>
    2520:	6f ef       	ldi	r22, 0xFF	; 255
    2522:	7f ef       	ldi	r23, 0xFF	; 255
    2524:	c6 01       	movw	r24, r12
    2526:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <strnlen>
    252a:	8c 01       	movw	r16, r24
    252c:	f9 2d       	mov	r31, r9
    252e:	ff 77       	andi	r31, 0x7F	; 127
    2530:	14 c0       	rjmp	.+40     	; 0x255a <vfprintf+0x45a>
    2532:	56 01       	movw	r10, r12
    2534:	22 e0       	ldi	r18, 0x02	; 2
    2536:	a2 0e       	add	r10, r18
    2538:	b1 1c       	adc	r11, r1
    253a:	f6 01       	movw	r30, r12
    253c:	c0 80       	ld	r12, Z
    253e:	d1 80       	ldd	r13, Z+1	; 0x01
    2540:	96 fe       	sbrs	r9, 6
    2542:	03 c0       	rjmp	.+6      	; 0x254a <vfprintf+0x44a>
    2544:	61 2f       	mov	r22, r17
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	02 c0       	rjmp	.+4      	; 0x254e <vfprintf+0x44e>
    254a:	6f ef       	ldi	r22, 0xFF	; 255
    254c:	7f ef       	ldi	r23, 0xFF	; 255
    254e:	c6 01       	movw	r24, r12
    2550:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <strnlen_P>
    2554:	8c 01       	movw	r16, r24
    2556:	f9 2d       	mov	r31, r9
    2558:	f0 68       	ori	r31, 0x80	; 128
    255a:	9f 2e       	mov	r9, r31
    255c:	f3 fd       	sbrc	r31, 3
    255e:	1a c0       	rjmp	.+52     	; 0x2594 <vfprintf+0x494>
    2560:	85 2d       	mov	r24, r5
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 17       	cp	r16, r24
    2566:	19 07       	cpc	r17, r25
    2568:	a8 f4       	brcc	.+42     	; 0x2594 <vfprintf+0x494>
    256a:	b7 01       	movw	r22, r14
    256c:	80 e2       	ldi	r24, 0x20	; 32
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2574:	5a 94       	dec	r5
    2576:	f4 cf       	rjmp	.-24     	; 0x2560 <vfprintf+0x460>
    2578:	f6 01       	movw	r30, r12
    257a:	97 fc       	sbrc	r9, 7
    257c:	85 91       	lpm	r24, Z+
    257e:	97 fe       	sbrs	r9, 7
    2580:	81 91       	ld	r24, Z+
    2582:	6f 01       	movw	r12, r30
    2584:	b7 01       	movw	r22, r14
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    258c:	51 10       	cpse	r5, r1
    258e:	5a 94       	dec	r5
    2590:	01 50       	subi	r16, 0x01	; 1
    2592:	11 09       	sbc	r17, r1
    2594:	01 15       	cp	r16, r1
    2596:	11 05       	cpc	r17, r1
    2598:	79 f7       	brne	.-34     	; 0x2578 <vfprintf+0x478>
    259a:	f7 c0       	rjmp	.+494    	; 0x278a <vfprintf+0x68a>
    259c:	84 36       	cpi	r24, 0x64	; 100
    259e:	11 f0       	breq	.+4      	; 0x25a4 <vfprintf+0x4a4>
    25a0:	89 36       	cpi	r24, 0x69	; 105
    25a2:	61 f5       	brne	.+88     	; 0x25fc <vfprintf+0x4fc>
    25a4:	56 01       	movw	r10, r12
    25a6:	97 fe       	sbrs	r9, 7
    25a8:	09 c0       	rjmp	.+18     	; 0x25bc <vfprintf+0x4bc>
    25aa:	24 e0       	ldi	r18, 0x04	; 4
    25ac:	a2 0e       	add	r10, r18
    25ae:	b1 1c       	adc	r11, r1
    25b0:	f6 01       	movw	r30, r12
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	0a c0       	rjmp	.+20     	; 0x25d0 <vfprintf+0x4d0>
    25bc:	f2 e0       	ldi	r31, 0x02	; 2
    25be:	af 0e       	add	r10, r31
    25c0:	b1 1c       	adc	r11, r1
    25c2:	f6 01       	movw	r30, r12
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	07 2e       	mov	r0, r23
    25ca:	00 0c       	add	r0, r0
    25cc:	88 0b       	sbc	r24, r24
    25ce:	99 0b       	sbc	r25, r25
    25d0:	f9 2d       	mov	r31, r9
    25d2:	ff 76       	andi	r31, 0x6F	; 111
    25d4:	9f 2e       	mov	r9, r31
    25d6:	97 ff       	sbrs	r25, 7
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <vfprintf+0x4ec>
    25da:	90 95       	com	r25
    25dc:	80 95       	com	r24
    25de:	70 95       	com	r23
    25e0:	61 95       	neg	r22
    25e2:	7f 4f       	sbci	r23, 0xFF	; 255
    25e4:	8f 4f       	sbci	r24, 0xFF	; 255
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	f0 68       	ori	r31, 0x80	; 128
    25ea:	9f 2e       	mov	r9, r31
    25ec:	2a e0       	ldi	r18, 0x0A	; 10
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	a3 01       	movw	r20, r6
    25f2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__ultoa_invert>
    25f6:	c8 2e       	mov	r12, r24
    25f8:	c6 18       	sub	r12, r6
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <vfprintf+0x57a>
    25fc:	09 2d       	mov	r16, r9
    25fe:	85 37       	cpi	r24, 0x75	; 117
    2600:	21 f4       	brne	.+8      	; 0x260a <vfprintf+0x50a>
    2602:	0f 7e       	andi	r16, 0xEF	; 239
    2604:	2a e0       	ldi	r18, 0x0A	; 10
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	1d c0       	rjmp	.+58     	; 0x2644 <vfprintf+0x544>
    260a:	09 7f       	andi	r16, 0xF9	; 249
    260c:	8f 36       	cpi	r24, 0x6F	; 111
    260e:	91 f0       	breq	.+36     	; 0x2634 <vfprintf+0x534>
    2610:	18 f4       	brcc	.+6      	; 0x2618 <vfprintf+0x518>
    2612:	88 35       	cpi	r24, 0x58	; 88
    2614:	59 f0       	breq	.+22     	; 0x262c <vfprintf+0x52c>
    2616:	c3 c0       	rjmp	.+390    	; 0x279e <vfprintf+0x69e>
    2618:	80 37       	cpi	r24, 0x70	; 112
    261a:	19 f0       	breq	.+6      	; 0x2622 <vfprintf+0x522>
    261c:	88 37       	cpi	r24, 0x78	; 120
    261e:	11 f0       	breq	.+4      	; 0x2624 <vfprintf+0x524>
    2620:	be c0       	rjmp	.+380    	; 0x279e <vfprintf+0x69e>
    2622:	00 61       	ori	r16, 0x10	; 16
    2624:	04 ff       	sbrs	r16, 4
    2626:	09 c0       	rjmp	.+18     	; 0x263a <vfprintf+0x53a>
    2628:	04 60       	ori	r16, 0x04	; 4
    262a:	07 c0       	rjmp	.+14     	; 0x263a <vfprintf+0x53a>
    262c:	94 fe       	sbrs	r9, 4
    262e:	08 c0       	rjmp	.+16     	; 0x2640 <vfprintf+0x540>
    2630:	06 60       	ori	r16, 0x06	; 6
    2632:	06 c0       	rjmp	.+12     	; 0x2640 <vfprintf+0x540>
    2634:	28 e0       	ldi	r18, 0x08	; 8
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <vfprintf+0x544>
    263a:	20 e1       	ldi	r18, 0x10	; 16
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <vfprintf+0x544>
    2640:	20 e1       	ldi	r18, 0x10	; 16
    2642:	32 e0       	ldi	r19, 0x02	; 2
    2644:	56 01       	movw	r10, r12
    2646:	07 ff       	sbrs	r16, 7
    2648:	09 c0       	rjmp	.+18     	; 0x265c <vfprintf+0x55c>
    264a:	84 e0       	ldi	r24, 0x04	; 4
    264c:	a8 0e       	add	r10, r24
    264e:	b1 1c       	adc	r11, r1
    2650:	f6 01       	movw	r30, r12
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	08 c0       	rjmp	.+16     	; 0x266c <vfprintf+0x56c>
    265c:	f2 e0       	ldi	r31, 0x02	; 2
    265e:	af 0e       	add	r10, r31
    2660:	b1 1c       	adc	r11, r1
    2662:	f6 01       	movw	r30, r12
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a3 01       	movw	r20, r6
    266e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__ultoa_invert>
    2672:	c8 2e       	mov	r12, r24
    2674:	c6 18       	sub	r12, r6
    2676:	0f 77       	andi	r16, 0x7F	; 127
    2678:	90 2e       	mov	r9, r16
    267a:	96 fe       	sbrs	r9, 6
    267c:	0b c0       	rjmp	.+22     	; 0x2694 <vfprintf+0x594>
    267e:	09 2d       	mov	r16, r9
    2680:	0e 7f       	andi	r16, 0xFE	; 254
    2682:	c1 16       	cp	r12, r17
    2684:	50 f4       	brcc	.+20     	; 0x269a <vfprintf+0x59a>
    2686:	94 fe       	sbrs	r9, 4
    2688:	0a c0       	rjmp	.+20     	; 0x269e <vfprintf+0x59e>
    268a:	92 fc       	sbrc	r9, 2
    268c:	08 c0       	rjmp	.+16     	; 0x269e <vfprintf+0x59e>
    268e:	09 2d       	mov	r16, r9
    2690:	0e 7e       	andi	r16, 0xEE	; 238
    2692:	05 c0       	rjmp	.+10     	; 0x269e <vfprintf+0x59e>
    2694:	dc 2c       	mov	r13, r12
    2696:	09 2d       	mov	r16, r9
    2698:	03 c0       	rjmp	.+6      	; 0x26a0 <vfprintf+0x5a0>
    269a:	dc 2c       	mov	r13, r12
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <vfprintf+0x5a0>
    269e:	d1 2e       	mov	r13, r17
    26a0:	04 ff       	sbrs	r16, 4
    26a2:	0d c0       	rjmp	.+26     	; 0x26be <vfprintf+0x5be>
    26a4:	fe 01       	movw	r30, r28
    26a6:	ec 0d       	add	r30, r12
    26a8:	f1 1d       	adc	r31, r1
    26aa:	80 81       	ld	r24, Z
    26ac:	80 33       	cpi	r24, 0x30	; 48
    26ae:	11 f4       	brne	.+4      	; 0x26b4 <vfprintf+0x5b4>
    26b0:	09 7e       	andi	r16, 0xE9	; 233
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <vfprintf+0x5c6>
    26b4:	02 ff       	sbrs	r16, 2
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <vfprintf+0x5c4>
    26b8:	d3 94       	inc	r13
    26ba:	d3 94       	inc	r13
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <vfprintf+0x5c6>
    26be:	80 2f       	mov	r24, r16
    26c0:	86 78       	andi	r24, 0x86	; 134
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <vfprintf+0x5c6>
    26c4:	d3 94       	inc	r13
    26c6:	03 fd       	sbrc	r16, 3
    26c8:	11 c0       	rjmp	.+34     	; 0x26ec <vfprintf+0x5ec>
    26ca:	00 ff       	sbrs	r16, 0
    26cc:	06 c0       	rjmp	.+12     	; 0x26da <vfprintf+0x5da>
    26ce:	1c 2d       	mov	r17, r12
    26d0:	d5 14       	cp	r13, r5
    26d2:	80 f4       	brcc	.+32     	; 0x26f4 <vfprintf+0x5f4>
    26d4:	15 0d       	add	r17, r5
    26d6:	1d 19       	sub	r17, r13
    26d8:	0d c0       	rjmp	.+26     	; 0x26f4 <vfprintf+0x5f4>
    26da:	d5 14       	cp	r13, r5
    26dc:	58 f4       	brcc	.+22     	; 0x26f4 <vfprintf+0x5f4>
    26de:	b7 01       	movw	r22, r14
    26e0:	80 e2       	ldi	r24, 0x20	; 32
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    26e8:	d3 94       	inc	r13
    26ea:	f7 cf       	rjmp	.-18     	; 0x26da <vfprintf+0x5da>
    26ec:	d5 14       	cp	r13, r5
    26ee:	10 f4       	brcc	.+4      	; 0x26f4 <vfprintf+0x5f4>
    26f0:	5d 18       	sub	r5, r13
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <vfprintf+0x5f6>
    26f4:	51 2c       	mov	r5, r1
    26f6:	04 ff       	sbrs	r16, 4
    26f8:	10 c0       	rjmp	.+32     	; 0x271a <vfprintf+0x61a>
    26fa:	b7 01       	movw	r22, r14
    26fc:	80 e3       	ldi	r24, 0x30	; 48
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2704:	02 ff       	sbrs	r16, 2
    2706:	17 c0       	rjmp	.+46     	; 0x2736 <vfprintf+0x636>
    2708:	01 fd       	sbrc	r16, 1
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <vfprintf+0x612>
    270c:	88 e7       	ldi	r24, 0x78	; 120
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <vfprintf+0x616>
    2712:	88 e5       	ldi	r24, 0x58	; 88
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	b7 01       	movw	r22, r14
    2718:	0c c0       	rjmp	.+24     	; 0x2732 <vfprintf+0x632>
    271a:	80 2f       	mov	r24, r16
    271c:	86 78       	andi	r24, 0x86	; 134
    271e:	59 f0       	breq	.+22     	; 0x2736 <vfprintf+0x636>
    2720:	01 ff       	sbrs	r16, 1
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <vfprintf+0x628>
    2724:	8b e2       	ldi	r24, 0x2B	; 43
    2726:	01 c0       	rjmp	.+2      	; 0x272a <vfprintf+0x62a>
    2728:	80 e2       	ldi	r24, 0x20	; 32
    272a:	07 fd       	sbrc	r16, 7
    272c:	8d e2       	ldi	r24, 0x2D	; 45
    272e:	b7 01       	movw	r22, r14
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2736:	c1 16       	cp	r12, r17
    2738:	38 f4       	brcc	.+14     	; 0x2748 <vfprintf+0x648>
    273a:	b7 01       	movw	r22, r14
    273c:	80 e3       	ldi	r24, 0x30	; 48
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2744:	11 50       	subi	r17, 0x01	; 1
    2746:	f7 cf       	rjmp	.-18     	; 0x2736 <vfprintf+0x636>
    2748:	ca 94       	dec	r12
    274a:	f3 01       	movw	r30, r6
    274c:	ec 0d       	add	r30, r12
    274e:	f1 1d       	adc	r31, r1
    2750:	80 81       	ld	r24, Z
    2752:	b7 01       	movw	r22, r14
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    275a:	c1 10       	cpse	r12, r1
    275c:	f5 cf       	rjmp	.-22     	; 0x2748 <vfprintf+0x648>
    275e:	15 c0       	rjmp	.+42     	; 0x278a <vfprintf+0x68a>
    2760:	f4 e0       	ldi	r31, 0x04	; 4
    2762:	f5 15       	cp	r31, r5
    2764:	60 f5       	brcc	.+88     	; 0x27be <vfprintf+0x6be>
    2766:	84 e0       	ldi	r24, 0x04	; 4
    2768:	58 1a       	sub	r5, r24
    276a:	93 fe       	sbrs	r9, 3
    276c:	1f c0       	rjmp	.+62     	; 0x27ac <vfprintf+0x6ac>
    276e:	01 11       	cpse	r16, r1
    2770:	27 c0       	rjmp	.+78     	; 0x27c0 <vfprintf+0x6c0>
    2772:	2c 85       	ldd	r18, Y+12	; 0x0c
    2774:	23 ff       	sbrs	r18, 3
    2776:	2a c0       	rjmp	.+84     	; 0x27cc <vfprintf+0x6cc>
    2778:	02 ec       	ldi	r16, 0xC2	; 194
    277a:	10 e0       	ldi	r17, 0x00	; 0
    277c:	39 2d       	mov	r19, r9
    277e:	30 71       	andi	r19, 0x10	; 16
    2780:	93 2e       	mov	r9, r19
    2782:	f8 01       	movw	r30, r16
    2784:	84 91       	lpm	r24, Z
    2786:	81 11       	cpse	r24, r1
    2788:	24 c0       	rjmp	.+72     	; 0x27d2 <vfprintf+0x6d2>
    278a:	55 20       	and	r5, r5
    278c:	09 f4       	brne	.+2      	; 0x2790 <vfprintf+0x690>
    278e:	e4 cc       	rjmp	.-1592   	; 0x2158 <vfprintf+0x58>
    2790:	b7 01       	movw	r22, r14
    2792:	80 e2       	ldi	r24, 0x20	; 32
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    279a:	5a 94       	dec	r5
    279c:	f6 cf       	rjmp	.-20     	; 0x278a <vfprintf+0x68a>
    279e:	f7 01       	movw	r30, r14
    27a0:	86 81       	ldd	r24, Z+6	; 0x06
    27a2:	97 81       	ldd	r25, Z+7	; 0x07
    27a4:	26 c0       	rjmp	.+76     	; 0x27f2 <vfprintf+0x6f2>
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	9f ef       	ldi	r25, 0xFF	; 255
    27aa:	23 c0       	rjmp	.+70     	; 0x27f2 <vfprintf+0x6f2>
    27ac:	b7 01       	movw	r22, r14
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    27b6:	5a 94       	dec	r5
    27b8:	51 10       	cpse	r5, r1
    27ba:	f8 cf       	rjmp	.-16     	; 0x27ac <vfprintf+0x6ac>
    27bc:	d8 cf       	rjmp	.-80     	; 0x276e <vfprintf+0x66e>
    27be:	51 2c       	mov	r5, r1
    27c0:	b7 01       	movw	r22, r14
    27c2:	80 2f       	mov	r24, r16
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    27ca:	d3 cf       	rjmp	.-90     	; 0x2772 <vfprintf+0x672>
    27cc:	06 ec       	ldi	r16, 0xC6	; 198
    27ce:	10 e0       	ldi	r17, 0x00	; 0
    27d0:	d5 cf       	rjmp	.-86     	; 0x277c <vfprintf+0x67c>
    27d2:	91 10       	cpse	r9, r1
    27d4:	80 52       	subi	r24, 0x20	; 32
    27d6:	b7 01       	movw	r22, r14
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    27de:	0f 5f       	subi	r16, 0xFF	; 255
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	cf cf       	rjmp	.-98     	; 0x2782 <vfprintf+0x682>
    27e4:	23 e0       	ldi	r18, 0x03	; 3
    27e6:	25 15       	cp	r18, r5
    27e8:	10 f4       	brcc	.+4      	; 0x27ee <vfprintf+0x6ee>
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	bd cf       	rjmp	.-134    	; 0x2768 <vfprintf+0x668>
    27ee:	51 2c       	mov	r5, r1
    27f0:	c0 cf       	rjmp	.-128    	; 0x2772 <vfprintf+0x672>
    27f2:	60 96       	adiw	r28, 0x10	; 16
    27f4:	e2 e1       	ldi	r30, 0x12	; 18
    27f6:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__epilogue_restores__>

000027fa <__prologue_saves__>:
    27fa:	2f 92       	push	r2
    27fc:	3f 92       	push	r3
    27fe:	4f 92       	push	r4
    2800:	5f 92       	push	r5
    2802:	6f 92       	push	r6
    2804:	7f 92       	push	r7
    2806:	8f 92       	push	r8
    2808:	9f 92       	push	r9
    280a:	af 92       	push	r10
    280c:	bf 92       	push	r11
    280e:	cf 92       	push	r12
    2810:	df 92       	push	r13
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	ca 1b       	sub	r28, r26
    2824:	db 0b       	sbc	r29, r27
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	09 94       	ijmp

00002832 <__epilogue_restores__>:
    2832:	2a 88       	ldd	r2, Y+18	; 0x12
    2834:	39 88       	ldd	r3, Y+17	; 0x11
    2836:	48 88       	ldd	r4, Y+16	; 0x10
    2838:	5f 84       	ldd	r5, Y+15	; 0x0f
    283a:	6e 84       	ldd	r6, Y+14	; 0x0e
    283c:	7d 84       	ldd	r7, Y+13	; 0x0d
    283e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2840:	9b 84       	ldd	r9, Y+11	; 0x0b
    2842:	aa 84       	ldd	r10, Y+10	; 0x0a
    2844:	b9 84       	ldd	r11, Y+9	; 0x09
    2846:	c8 84       	ldd	r12, Y+8	; 0x08
    2848:	df 80       	ldd	r13, Y+7	; 0x07
    284a:	ee 80       	ldd	r14, Y+6	; 0x06
    284c:	fd 80       	ldd	r15, Y+5	; 0x05
    284e:	0c 81       	ldd	r16, Y+4	; 0x04
    2850:	1b 81       	ldd	r17, Y+3	; 0x03
    2852:	aa 81       	ldd	r26, Y+2	; 0x02
    2854:	b9 81       	ldd	r27, Y+1	; 0x01
    2856:	ce 0f       	add	r28, r30
    2858:	d1 1d       	adc	r29, r1
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	ed 01       	movw	r28, r26
    2866:	08 95       	ret

00002868 <__ftoa_engine>:
    2868:	28 30       	cpi	r18, 0x08	; 8
    286a:	08 f0       	brcs	.+2      	; 0x286e <__ftoa_engine+0x6>
    286c:	27 e0       	ldi	r18, 0x07	; 7
    286e:	33 27       	eor	r19, r19
    2870:	da 01       	movw	r26, r20
    2872:	99 0f       	add	r25, r25
    2874:	31 1d       	adc	r19, r1
    2876:	87 fd       	sbrc	r24, 7
    2878:	91 60       	ori	r25, 0x01	; 1
    287a:	00 96       	adiw	r24, 0x00	; 0
    287c:	61 05       	cpc	r22, r1
    287e:	71 05       	cpc	r23, r1
    2880:	39 f4       	brne	.+14     	; 0x2890 <__ftoa_engine+0x28>
    2882:	32 60       	ori	r19, 0x02	; 2
    2884:	2e 5f       	subi	r18, 0xFE	; 254
    2886:	3d 93       	st	X+, r19
    2888:	30 e3       	ldi	r19, 0x30	; 48
    288a:	2a 95       	dec	r18
    288c:	e1 f7       	brne	.-8      	; 0x2886 <__ftoa_engine+0x1e>
    288e:	08 95       	ret
    2890:	9f 3f       	cpi	r25, 0xFF	; 255
    2892:	30 f0       	brcs	.+12     	; 0x28a0 <__ftoa_engine+0x38>
    2894:	80 38       	cpi	r24, 0x80	; 128
    2896:	71 05       	cpc	r23, r1
    2898:	61 05       	cpc	r22, r1
    289a:	09 f0       	breq	.+2      	; 0x289e <__ftoa_engine+0x36>
    289c:	3c 5f       	subi	r19, 0xFC	; 252
    289e:	3c 5f       	subi	r19, 0xFC	; 252
    28a0:	3d 93       	st	X+, r19
    28a2:	91 30       	cpi	r25, 0x01	; 1
    28a4:	08 f0       	brcs	.+2      	; 0x28a8 <__ftoa_engine+0x40>
    28a6:	80 68       	ori	r24, 0x80	; 128
    28a8:	91 1d       	adc	r25, r1
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	1f 93       	push	r17
    28b0:	0f 93       	push	r16
    28b2:	ff 92       	push	r15
    28b4:	ef 92       	push	r14
    28b6:	19 2f       	mov	r17, r25
    28b8:	98 7f       	andi	r25, 0xF8	; 248
    28ba:	96 95       	lsr	r25
    28bc:	e9 2f       	mov	r30, r25
    28be:	96 95       	lsr	r25
    28c0:	96 95       	lsr	r25
    28c2:	e9 0f       	add	r30, r25
    28c4:	ff 27       	eor	r31, r31
    28c6:	ec 5d       	subi	r30, 0xDC	; 220
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	99 27       	eor	r25, r25
    28cc:	33 27       	eor	r19, r19
    28ce:	ee 24       	eor	r14, r14
    28d0:	ff 24       	eor	r15, r15
    28d2:	a7 01       	movw	r20, r14
    28d4:	e7 01       	movw	r28, r14
    28d6:	05 90       	lpm	r0, Z+
    28d8:	08 94       	sec
    28da:	07 94       	ror	r0
    28dc:	28 f4       	brcc	.+10     	; 0x28e8 <__ftoa_engine+0x80>
    28de:	36 0f       	add	r19, r22
    28e0:	e7 1e       	adc	r14, r23
    28e2:	f8 1e       	adc	r15, r24
    28e4:	49 1f       	adc	r20, r25
    28e6:	51 1d       	adc	r21, r1
    28e8:	66 0f       	add	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	88 1f       	adc	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	06 94       	lsr	r0
    28f2:	a1 f7       	brne	.-24     	; 0x28dc <__ftoa_engine+0x74>
    28f4:	05 90       	lpm	r0, Z+
    28f6:	07 94       	ror	r0
    28f8:	28 f4       	brcc	.+10     	; 0x2904 <__ftoa_engine+0x9c>
    28fa:	e7 0e       	add	r14, r23
    28fc:	f8 1e       	adc	r15, r24
    28fe:	49 1f       	adc	r20, r25
    2900:	56 1f       	adc	r21, r22
    2902:	c1 1d       	adc	r28, r1
    2904:	77 0f       	add	r23, r23
    2906:	88 1f       	adc	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	66 1f       	adc	r22, r22
    290c:	06 94       	lsr	r0
    290e:	a1 f7       	brne	.-24     	; 0x28f8 <__ftoa_engine+0x90>
    2910:	05 90       	lpm	r0, Z+
    2912:	07 94       	ror	r0
    2914:	28 f4       	brcc	.+10     	; 0x2920 <__ftoa_engine+0xb8>
    2916:	f8 0e       	add	r15, r24
    2918:	49 1f       	adc	r20, r25
    291a:	56 1f       	adc	r21, r22
    291c:	c7 1f       	adc	r28, r23
    291e:	d1 1d       	adc	r29, r1
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	06 94       	lsr	r0
    292a:	a1 f7       	brne	.-24     	; 0x2914 <__ftoa_engine+0xac>
    292c:	05 90       	lpm	r0, Z+
    292e:	07 94       	ror	r0
    2930:	20 f4       	brcc	.+8      	; 0x293a <__ftoa_engine+0xd2>
    2932:	49 0f       	add	r20, r25
    2934:	56 1f       	adc	r21, r22
    2936:	c7 1f       	adc	r28, r23
    2938:	d8 1f       	adc	r29, r24
    293a:	99 0f       	add	r25, r25
    293c:	66 1f       	adc	r22, r22
    293e:	77 1f       	adc	r23, r23
    2940:	88 1f       	adc	r24, r24
    2942:	06 94       	lsr	r0
    2944:	a9 f7       	brne	.-22     	; 0x2930 <__ftoa_engine+0xc8>
    2946:	84 91       	lpm	r24, Z
    2948:	10 95       	com	r17
    294a:	17 70       	andi	r17, 0x07	; 7
    294c:	41 f0       	breq	.+16     	; 0x295e <__ftoa_engine+0xf6>
    294e:	d6 95       	lsr	r29
    2950:	c7 95       	ror	r28
    2952:	57 95       	ror	r21
    2954:	47 95       	ror	r20
    2956:	f7 94       	ror	r15
    2958:	e7 94       	ror	r14
    295a:	1a 95       	dec	r17
    295c:	c1 f7       	brne	.-16     	; 0x294e <__ftoa_engine+0xe6>
    295e:	ea ec       	ldi	r30, 0xCA	; 202
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	68 94       	set
    2964:	15 90       	lpm	r1, Z+
    2966:	15 91       	lpm	r17, Z+
    2968:	35 91       	lpm	r19, Z+
    296a:	65 91       	lpm	r22, Z+
    296c:	95 91       	lpm	r25, Z+
    296e:	05 90       	lpm	r0, Z+
    2970:	7f e2       	ldi	r23, 0x2F	; 47
    2972:	73 95       	inc	r23
    2974:	e1 18       	sub	r14, r1
    2976:	f1 0a       	sbc	r15, r17
    2978:	43 0b       	sbc	r20, r19
    297a:	56 0b       	sbc	r21, r22
    297c:	c9 0b       	sbc	r28, r25
    297e:	d0 09       	sbc	r29, r0
    2980:	c0 f7       	brcc	.-16     	; 0x2972 <__ftoa_engine+0x10a>
    2982:	e1 0c       	add	r14, r1
    2984:	f1 1e       	adc	r15, r17
    2986:	43 1f       	adc	r20, r19
    2988:	56 1f       	adc	r21, r22
    298a:	c9 1f       	adc	r28, r25
    298c:	d0 1d       	adc	r29, r0
    298e:	7e f4       	brtc	.+30     	; 0x29ae <__ftoa_engine+0x146>
    2990:	70 33       	cpi	r23, 0x30	; 48
    2992:	11 f4       	brne	.+4      	; 0x2998 <__ftoa_engine+0x130>
    2994:	8a 95       	dec	r24
    2996:	e6 cf       	rjmp	.-52     	; 0x2964 <__ftoa_engine+0xfc>
    2998:	e8 94       	clt
    299a:	01 50       	subi	r16, 0x01	; 1
    299c:	30 f0       	brcs	.+12     	; 0x29aa <__ftoa_engine+0x142>
    299e:	08 0f       	add	r16, r24
    29a0:	0a f4       	brpl	.+2      	; 0x29a4 <__ftoa_engine+0x13c>
    29a2:	00 27       	eor	r16, r16
    29a4:	02 17       	cp	r16, r18
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <__ftoa_engine+0x142>
    29a8:	20 2f       	mov	r18, r16
    29aa:	23 95       	inc	r18
    29ac:	02 2f       	mov	r16, r18
    29ae:	7a 33       	cpi	r23, 0x3A	; 58
    29b0:	28 f0       	brcs	.+10     	; 0x29bc <__ftoa_engine+0x154>
    29b2:	79 e3       	ldi	r23, 0x39	; 57
    29b4:	7d 93       	st	X+, r23
    29b6:	2a 95       	dec	r18
    29b8:	e9 f7       	brne	.-6      	; 0x29b4 <__ftoa_engine+0x14c>
    29ba:	10 c0       	rjmp	.+32     	; 0x29dc <__ftoa_engine+0x174>
    29bc:	7d 93       	st	X+, r23
    29be:	2a 95       	dec	r18
    29c0:	89 f6       	brne	.-94     	; 0x2964 <__ftoa_engine+0xfc>
    29c2:	06 94       	lsr	r0
    29c4:	97 95       	ror	r25
    29c6:	67 95       	ror	r22
    29c8:	37 95       	ror	r19
    29ca:	17 95       	ror	r17
    29cc:	17 94       	ror	r1
    29ce:	e1 18       	sub	r14, r1
    29d0:	f1 0a       	sbc	r15, r17
    29d2:	43 0b       	sbc	r20, r19
    29d4:	56 0b       	sbc	r21, r22
    29d6:	c9 0b       	sbc	r28, r25
    29d8:	d0 09       	sbc	r29, r0
    29da:	98 f0       	brcs	.+38     	; 0x2a02 <__ftoa_engine+0x19a>
    29dc:	23 95       	inc	r18
    29de:	7e 91       	ld	r23, -X
    29e0:	73 95       	inc	r23
    29e2:	7a 33       	cpi	r23, 0x3A	; 58
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <__ftoa_engine+0x180>
    29e6:	70 e3       	ldi	r23, 0x30	; 48
    29e8:	7c 93       	st	X, r23
    29ea:	20 13       	cpse	r18, r16
    29ec:	b8 f7       	brcc	.-18     	; 0x29dc <__ftoa_engine+0x174>
    29ee:	7e 91       	ld	r23, -X
    29f0:	70 61       	ori	r23, 0x10	; 16
    29f2:	7d 93       	st	X+, r23
    29f4:	30 f0       	brcs	.+12     	; 0x2a02 <__ftoa_engine+0x19a>
    29f6:	83 95       	inc	r24
    29f8:	71 e3       	ldi	r23, 0x31	; 49
    29fa:	7d 93       	st	X+, r23
    29fc:	70 e3       	ldi	r23, 0x30	; 48
    29fe:	2a 95       	dec	r18
    2a00:	e1 f7       	brne	.-8      	; 0x29fa <__ftoa_engine+0x192>
    2a02:	11 24       	eor	r1, r1
    2a04:	ef 90       	pop	r14
    2a06:	ff 90       	pop	r15
    2a08:	0f 91       	pop	r16
    2a0a:	1f 91       	pop	r17
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	99 27       	eor	r25, r25
    2a12:	87 fd       	sbrc	r24, 7
    2a14:	90 95       	com	r25
    2a16:	08 95       	ret

00002a18 <strnlen_P>:
    2a18:	fc 01       	movw	r30, r24
    2a1a:	05 90       	lpm	r0, Z+
    2a1c:	61 50       	subi	r22, 0x01	; 1
    2a1e:	70 40       	sbci	r23, 0x00	; 0
    2a20:	01 10       	cpse	r0, r1
    2a22:	d8 f7       	brcc	.-10     	; 0x2a1a <strnlen_P+0x2>
    2a24:	80 95       	com	r24
    2a26:	90 95       	com	r25
    2a28:	8e 0f       	add	r24, r30
    2a2a:	9f 1f       	adc	r25, r31
    2a2c:	08 95       	ret

00002a2e <strnlen>:
    2a2e:	fc 01       	movw	r30, r24
    2a30:	61 50       	subi	r22, 0x01	; 1
    2a32:	70 40       	sbci	r23, 0x00	; 0
    2a34:	01 90       	ld	r0, Z+
    2a36:	01 10       	cpse	r0, r1
    2a38:	d8 f7       	brcc	.-10     	; 0x2a30 <strnlen+0x2>
    2a3a:	80 95       	com	r24
    2a3c:	90 95       	com	r25
    2a3e:	8e 0f       	add	r24, r30
    2a40:	9f 1f       	adc	r25, r31
    2a42:	08 95       	ret

00002a44 <fputc>:
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	fb 01       	movw	r30, r22
    2a4e:	23 81       	ldd	r18, Z+3	; 0x03
    2a50:	21 fd       	sbrc	r18, 1
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <fputc+0x16>
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	9f ef       	ldi	r25, 0xFF	; 255
    2a58:	2c c0       	rjmp	.+88     	; 0x2ab2 <fputc+0x6e>
    2a5a:	22 ff       	sbrs	r18, 2
    2a5c:	16 c0       	rjmp	.+44     	; 0x2a8a <fputc+0x46>
    2a5e:	46 81       	ldd	r20, Z+6	; 0x06
    2a60:	57 81       	ldd	r21, Z+7	; 0x07
    2a62:	24 81       	ldd	r18, Z+4	; 0x04
    2a64:	35 81       	ldd	r19, Z+5	; 0x05
    2a66:	42 17       	cp	r20, r18
    2a68:	53 07       	cpc	r21, r19
    2a6a:	44 f4       	brge	.+16     	; 0x2a7c <fputc+0x38>
    2a6c:	a0 81       	ld	r26, Z
    2a6e:	b1 81       	ldd	r27, Z+1	; 0x01
    2a70:	9d 01       	movw	r18, r26
    2a72:	2f 5f       	subi	r18, 0xFF	; 255
    2a74:	3f 4f       	sbci	r19, 0xFF	; 255
    2a76:	31 83       	std	Z+1, r19	; 0x01
    2a78:	20 83       	st	Z, r18
    2a7a:	8c 93       	st	X, r24
    2a7c:	26 81       	ldd	r18, Z+6	; 0x06
    2a7e:	37 81       	ldd	r19, Z+7	; 0x07
    2a80:	2f 5f       	subi	r18, 0xFF	; 255
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
    2a84:	37 83       	std	Z+7, r19	; 0x07
    2a86:	26 83       	std	Z+6, r18	; 0x06
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <fputc+0x6e>
    2a8a:	8b 01       	movw	r16, r22
    2a8c:	ec 01       	movw	r28, r24
    2a8e:	fb 01       	movw	r30, r22
    2a90:	00 84       	ldd	r0, Z+8	; 0x08
    2a92:	f1 85       	ldd	r31, Z+9	; 0x09
    2a94:	e0 2d       	mov	r30, r0
    2a96:	09 95       	icall
    2a98:	89 2b       	or	r24, r25
    2a9a:	e1 f6       	brne	.-72     	; 0x2a54 <fputc+0x10>
    2a9c:	d8 01       	movw	r26, r16
    2a9e:	16 96       	adiw	r26, 0x06	; 6
    2aa0:	8d 91       	ld	r24, X+
    2aa2:	9c 91       	ld	r25, X
    2aa4:	17 97       	sbiw	r26, 0x07	; 7
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	17 96       	adiw	r26, 0x07	; 7
    2aaa:	9c 93       	st	X, r25
    2aac:	8e 93       	st	-X, r24
    2aae:	16 97       	sbiw	r26, 0x06	; 6
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	08 95       	ret

00002abc <sprintf>:
    2abc:	ae e0       	ldi	r26, 0x0E	; 14
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e4 e6       	ldi	r30, 0x64	; 100
    2ac2:	f5 e1       	ldi	r31, 0x15	; 21
    2ac4:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x1c>
    2ac8:	0d 89       	ldd	r16, Y+21	; 0x15
    2aca:	1e 89       	ldd	r17, Y+22	; 0x16
    2acc:	86 e0       	ldi	r24, 0x06	; 6
    2ace:	8c 83       	std	Y+4, r24	; 0x04
    2ad0:	1a 83       	std	Y+2, r17	; 0x02
    2ad2:	09 83       	std	Y+1, r16	; 0x01
    2ad4:	8f ef       	ldi	r24, 0xFF	; 255
    2ad6:	9f e7       	ldi	r25, 0x7F	; 127
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	ae 01       	movw	r20, r28
    2ade:	47 5e       	subi	r20, 0xE7	; 231
    2ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae2:	6f 89       	ldd	r22, Y+23	; 0x17
    2ae4:	78 8d       	ldd	r23, Y+24	; 0x18
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	0e 94 80 10 	call	0x2100	; 0x2100 <vfprintf>
    2aee:	ef 81       	ldd	r30, Y+7	; 0x07
    2af0:	f8 85       	ldd	r31, Y+8	; 0x08
    2af2:	e0 0f       	add	r30, r16
    2af4:	f1 1f       	adc	r31, r17
    2af6:	10 82       	st	Z, r1
    2af8:	2e 96       	adiw	r28, 0x0e	; 14
    2afa:	e4 e0       	ldi	r30, 0x04	; 4
    2afc:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x1c>

00002b00 <__ultoa_invert>:
    2b00:	fa 01       	movw	r30, r20
    2b02:	aa 27       	eor	r26, r26
    2b04:	28 30       	cpi	r18, 0x08	; 8
    2b06:	51 f1       	breq	.+84     	; 0x2b5c <__ultoa_invert+0x5c>
    2b08:	20 31       	cpi	r18, 0x10	; 16
    2b0a:	81 f1       	breq	.+96     	; 0x2b6c <__ultoa_invert+0x6c>
    2b0c:	e8 94       	clt
    2b0e:	6f 93       	push	r22
    2b10:	6e 7f       	andi	r22, 0xFE	; 254
    2b12:	6e 5f       	subi	r22, 0xFE	; 254
    2b14:	7f 4f       	sbci	r23, 0xFF	; 255
    2b16:	8f 4f       	sbci	r24, 0xFF	; 255
    2b18:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1a:	af 4f       	sbci	r26, 0xFF	; 255
    2b1c:	b1 e0       	ldi	r27, 0x01	; 1
    2b1e:	3e d0       	rcall	.+124    	; 0x2b9c <__ultoa_invert+0x9c>
    2b20:	b4 e0       	ldi	r27, 0x04	; 4
    2b22:	3c d0       	rcall	.+120    	; 0x2b9c <__ultoa_invert+0x9c>
    2b24:	67 0f       	add	r22, r23
    2b26:	78 1f       	adc	r23, r24
    2b28:	89 1f       	adc	r24, r25
    2b2a:	9a 1f       	adc	r25, r26
    2b2c:	a1 1d       	adc	r26, r1
    2b2e:	68 0f       	add	r22, r24
    2b30:	79 1f       	adc	r23, r25
    2b32:	8a 1f       	adc	r24, r26
    2b34:	91 1d       	adc	r25, r1
    2b36:	a1 1d       	adc	r26, r1
    2b38:	6a 0f       	add	r22, r26
    2b3a:	71 1d       	adc	r23, r1
    2b3c:	81 1d       	adc	r24, r1
    2b3e:	91 1d       	adc	r25, r1
    2b40:	a1 1d       	adc	r26, r1
    2b42:	20 d0       	rcall	.+64     	; 0x2b84 <__ultoa_invert+0x84>
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <__ultoa_invert+0x48>
    2b46:	68 94       	set
    2b48:	3f 91       	pop	r19
    2b4a:	2a e0       	ldi	r18, 0x0A	; 10
    2b4c:	26 9f       	mul	r18, r22
    2b4e:	11 24       	eor	r1, r1
    2b50:	30 19       	sub	r19, r0
    2b52:	30 5d       	subi	r19, 0xD0	; 208
    2b54:	31 93       	st	Z+, r19
    2b56:	de f6       	brtc	.-74     	; 0x2b0e <__ultoa_invert+0xe>
    2b58:	cf 01       	movw	r24, r30
    2b5a:	08 95       	ret
    2b5c:	46 2f       	mov	r20, r22
    2b5e:	47 70       	andi	r20, 0x07	; 7
    2b60:	40 5d       	subi	r20, 0xD0	; 208
    2b62:	41 93       	st	Z+, r20
    2b64:	b3 e0       	ldi	r27, 0x03	; 3
    2b66:	0f d0       	rcall	.+30     	; 0x2b86 <__ultoa_invert+0x86>
    2b68:	c9 f7       	brne	.-14     	; 0x2b5c <__ultoa_invert+0x5c>
    2b6a:	f6 cf       	rjmp	.-20     	; 0x2b58 <__ultoa_invert+0x58>
    2b6c:	46 2f       	mov	r20, r22
    2b6e:	4f 70       	andi	r20, 0x0F	; 15
    2b70:	40 5d       	subi	r20, 0xD0	; 208
    2b72:	4a 33       	cpi	r20, 0x3A	; 58
    2b74:	18 f0       	brcs	.+6      	; 0x2b7c <__ultoa_invert+0x7c>
    2b76:	49 5d       	subi	r20, 0xD9	; 217
    2b78:	31 fd       	sbrc	r19, 1
    2b7a:	40 52       	subi	r20, 0x20	; 32
    2b7c:	41 93       	st	Z+, r20
    2b7e:	02 d0       	rcall	.+4      	; 0x2b84 <__ultoa_invert+0x84>
    2b80:	a9 f7       	brne	.-22     	; 0x2b6c <__ultoa_invert+0x6c>
    2b82:	ea cf       	rjmp	.-44     	; 0x2b58 <__ultoa_invert+0x58>
    2b84:	b4 e0       	ldi	r27, 0x04	; 4
    2b86:	a6 95       	lsr	r26
    2b88:	97 95       	ror	r25
    2b8a:	87 95       	ror	r24
    2b8c:	77 95       	ror	r23
    2b8e:	67 95       	ror	r22
    2b90:	ba 95       	dec	r27
    2b92:	c9 f7       	brne	.-14     	; 0x2b86 <__ultoa_invert+0x86>
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	61 05       	cpc	r22, r1
    2b98:	71 05       	cpc	r23, r1
    2b9a:	08 95       	ret
    2b9c:	9b 01       	movw	r18, r22
    2b9e:	ac 01       	movw	r20, r24
    2ba0:	0a 2e       	mov	r0, r26
    2ba2:	06 94       	lsr	r0
    2ba4:	57 95       	ror	r21
    2ba6:	47 95       	ror	r20
    2ba8:	37 95       	ror	r19
    2baa:	27 95       	ror	r18
    2bac:	ba 95       	dec	r27
    2bae:	c9 f7       	brne	.-14     	; 0x2ba2 <__ultoa_invert+0xa2>
    2bb0:	62 0f       	add	r22, r18
    2bb2:	73 1f       	adc	r23, r19
    2bb4:	84 1f       	adc	r24, r20
    2bb6:	95 1f       	adc	r25, r21
    2bb8:	a0 1d       	adc	r26, r0
    2bba:	08 95       	ret

00002bbc <eeprom_read_byte>:
    2bbc:	f9 99       	sbic	0x1f, 1	; 31
    2bbe:	fe cf       	rjmp	.-4      	; 0x2bbc <eeprom_read_byte>
    2bc0:	92 bd       	out	0x22, r25	; 34
    2bc2:	81 bd       	out	0x21, r24	; 33
    2bc4:	f8 9a       	sbi	0x1f, 0	; 31
    2bc6:	99 27       	eor	r25, r25
    2bc8:	80 b5       	in	r24, 0x20	; 32
    2bca:	08 95       	ret

00002bcc <eeprom_update_byte>:
    2bcc:	26 2f       	mov	r18, r22

00002bce <eeprom_update_r18>:
    2bce:	f9 99       	sbic	0x1f, 1	; 31
    2bd0:	fe cf       	rjmp	.-4      	; 0x2bce <eeprom_update_r18>
    2bd2:	92 bd       	out	0x22, r25	; 34
    2bd4:	81 bd       	out	0x21, r24	; 33
    2bd6:	f8 9a       	sbi	0x1f, 0	; 31
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	00 b4       	in	r0, 0x20	; 32
    2bdc:	02 16       	cp	r0, r18
    2bde:	39 f0       	breq	.+14     	; 0x2bee <eeprom_update_r18+0x20>
    2be0:	1f ba       	out	0x1f, r1	; 31
    2be2:	20 bd       	out	0x20, r18	; 32
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	fa 9a       	sbi	0x1f, 2	; 31
    2bea:	f9 9a       	sbi	0x1f, 1	; 31
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	08 95       	ret

00002bf0 <_exit>:
    2bf0:	f8 94       	cli

00002bf2 <__stop_program>:
    2bf2:	ff cf       	rjmp	.-2      	; 0x2bf2 <__stop_program>
